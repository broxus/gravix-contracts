pragma ever-solidity ^0.62.0;

//───────────────────────────────────────────────────────────────────────────────────────────────
//─██████████████─████████████████───██████████████─██████──██████─██████████─████████──████████─
//─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░██─██░░░░██──██░░░░██─
//─██░░██████████─██░░████████░░██───██░░██████░░██─██░░██──██░░██─████░░████─████░░██──██░░████─
//─██░░██─────────██░░██────██░░██───██░░██──██░░██─██░░██──██░░██───██░░██─────██░░░░██░░░░██───
//─██░░██─────────██░░████████░░██───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██████─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██───██░░██───────██░░░░░░██─────
//─██░░██──██░░██─██░░██████░░████───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██░░██─██░░██──██░░██─────██░░██──██░░██─██░░░░██░░░░██───██░░██─────██░░░░██░░░░██───
//─██░░██████░░██─██░░██──██░░██████─██░░██──██░░██─████░░░░░░████─████░░████─████░░██──██░░████─
//─██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░██──██░░██───████░░████───██░░░░░░██─██░░░░██──██░░░░██─
//─██████████████─██████──██████████─██████──██████─────██████─────██████████─████████──████████─
//───────────────────────────────────────────────────────────────────────────────────────────────


import {Callback} from "./libraries/Callback.tsol";
import {Constants} from "./libraries/Constants.tsol";
import {GravixVaultBase} from "./base/gravix_vault/GravixVaultBase.tsol";
import {IGravixVault} from "./interfaces/IGravixVault.tsol";
import {IOldGravixVault} from "./interfaces/IOldGravixVault.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


contract GravixVault is GravixVaultBase {
    constructor(
        address _owner,
        address _usdt,
        address _stg_usdt,
        address _priceNode,
        uint256 _pricePubkey,
        TvmCell _gravixAccountCode,
        TvmCell _oracleProxyCode
    ) public {
        managers.owner = _owner;
        usdt.root = _usdt;
        stgUsdt.root = _stg_usdt;
        priceNode = _priceNode;
        pricePubkey = _pricePubkey;
        gravixAccountCode.code = _gravixAccountCode;
        oracleProxyCode.code = _oracleProxyCode;

        _setupTokenWallets();
    }

    function upgrade(TvmCell code,  Callback.CallMeta meta) external onlyManager {
        TvmCell data = abi.encode(
            meta,
            UpgradeStorage({
                managers: managers,
                priceNode: priceNode,
                pricePubkey: pricePubkey,
                usdt: usdt,
                stgUsdt: stgUsdt,
                treasuries: treasuries,
                platformCode: platformCode,
                gravixVaultVersion: gravixVaultVersion,
                oracleProxyCode: oracleProxyCode,
                gravixAccountCode: gravixAccountCode,
                poolAssets: poolAssets,
                insuranceFund: insuranceFund, // collected fees, pnl and etc.
                insuranceFundOverflowDistributionSchema: insuranceFundOverflowDistributionSchema,
                referralFeeSchema: referralFeeSchema,
                grandReferralFeeSchema: grandReferralFeeSchema,
                collateralReserve: collateralReserve, // sum of all usdt provided as a collateral for open order
                maxPoolUtilRatio: maxPoolUtilRatio,
                maxPnlRate: maxPnlRate,
                minPositionCollateral: minPositionCollateral,
                paused: paused,
                liquidationParams: liquidationParams,
                minStopLossRate: minStopLossRate,
                openFeeDistributionSchema: openFeeDistributionSchema,
                closeFeeDistributionSchema: closeFeeDistributionSchema,
                pnlDistributionSchema: pnlDistributionSchema,
                marketCount: marketCount,
                markets: markets,
                workingHours: workingHours,
                weekends: weekends,
                oracleConfigs: oracleConfigs,
                requestNonce: requestNonce,
                pendingMarketRequests: pendingMarketRequests,
                pendingLimitRequests: pendingLimitRequests,
                limitBotVault: limitBotVault
            })
        );

        // set code after complete this method
        tvm.setcode(code);

        // run onCodeUpgrade from new code
        tvm.setCurrentCode(code);
        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell upgradeData) private {
        tvm.rawReserve(_reserve(), 0);
        msg.sender.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false });
    }

}
