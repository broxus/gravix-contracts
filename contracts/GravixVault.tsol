pragma ever-solidity ^0.62.0;

//───────────────────────────────────────────────────────────────────────────────────────────────
//─██████████████─████████████████───██████████████─██████──██████─██████████─████████──████████─
//─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░██─██░░░░██──██░░░░██─
//─██░░██████████─██░░████████░░██───██░░██████░░██─██░░██──██░░██─████░░████─████░░██──██░░████─
//─██░░██─────────██░░██────██░░██───██░░██──██░░██─██░░██──██░░██───██░░██─────██░░░░██░░░░██───
//─██░░██─────────██░░████████░░██───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██████─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██───██░░██───────██░░░░░░██─────
//─██░░██──██░░██─██░░██████░░████───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██░░██─██░░██──██░░██─────██░░██──██░░██─██░░░░██░░░░██───██░░██─────██░░░░██░░░░██───
//─██░░██████░░██─██░░██──██░░██████─██░░██──██░░██─████░░░░░░████─████░░████─████░░██──██░░████─
//─██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░██──██░░██───████░░████───██░░░░░░██─██░░░░██──██░░░░██─
//─██████████████─██████──██████████─██████──██████─────██████─────██████████─████████──████████─
//───────────────────────────────────────────────────────────────────────────────────────────────

import "broxus-token-contracts/contracts/interfaces/ITokenRootUpgradeable.tsol";
import "broxus-token-contracts/contracts/interfaces/ITokenWalletUpgradeable.tsol";
import "broxus-token-contracts/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./libraries/Gas.tsol";
import "./libraries/Callback.tsol";
import "./base/gravix_vault/GravixVaultBase.tsol";
import "./interfaces/IGravixAccount.tsol";
import {DateTime as DateTimeLib} from "./libraries/DateTime.tsol";


contract GravixVault is GravixVaultBase {
    constructor(
        address _owner,
        address _market_manager,
        address _usdt,
        address _stg_usdt,
        address _oracle
    ) public {
        require (tvm.pubkey() != 0, Errors.WRONG_PUBKEY);
        require (tvm.pubkey() == msg.pubkey(), Errors.WRONG_PUBKEY);
        tvm.accept();

        owner = _owner;
        marketManager = _market_manager;
        usdt = _usdt;
        stgUsdt = _stg_usdt;
        oracle = _oracle;

        _setupTokenWallets();
    }

    function upgrade(TvmCell code,  Callback.CallMeta meta) external onlyOwner {
        TvmCell data = abi.encode(
            meta,
            owner,
            marketManager,
            oracle,
            usdt,
            usdtWallet,
            stgUsdt,
            stgUsdtWallet,
            treasury,
            projectFund,
            devFund,
            oracleProxyCode,
            platformCode,
            gravixAccountCode,
            gravixAccountVersion,
            oracleProxyVersion,
            gravixVaultVersion,
            poolBalance, // liquidity deposits
            stgUsdtSupply, // amount of minted stgUsdt
            targetPrice,
            insuranceFund, // collected fees, pnl and etc.
            insuranceFundLimit,
            insuranceFundOverflowDistributionSchema,
            collateralReserve, // sum of all usdt provided as a collateral for open order
            totalNOI,
            totalNOILimitEnabled,
            maxPoolUtilRatio,
            minPositionCollateral,
            paused,
            liquidationThresholdRate,
            liquidatorRewardShare,
            openFeeDistributionSchema,
            closeFeeDistributionSchema,
            marketCount,
            markets,
            workingHours,
            weekends,
            oracleConfigs,
            pending_market_requests
        );

        // set code after complete this method
        tvm.setcode(code);

        // run onCodeUpgrade from new code
        tvm.setCurrentCode(code);
        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell upgrade_data) private {}
}