pragma ever-solidity ^0.62.0;


import "./GravixAccountStorage.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "../../libraries/Gas.tsol";
import "../../libraries/Callback.tsol";
import "../../libraries/PlatformTypes.tsol";
import "../../libraries/Errors.tsol";
import "../../libraries/Constants.tsol";
import {RPlatform as Platform} from "../../Platform.tsol";


abstract contract GravixAccountHelpers is GravixAccountStorage {
    function getDetails() external view responsible returns (
        uint32 _currentVersion, address _vault, address _user, address _referrer, address _grandReferrer, uint128 _referralBalance
    ) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (currentVersion, vault, user, referrer, grandReferrer, referralBalance);
    }

    function getReferrerForMarketOrder() external view override responsible returns (address _user, address _referrer) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (user, referrer);
    }
    function getReferrerForLimitOrder() external view override responsible returns (address _user, address _referrer) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (user, referrer);
    }

    // @param price - 8 decimals number
    function applyOpenSpread(uint128 price, IGravixVault.PositionType _type, uint128 spread) public pure responsible returns (uint128 newPrice) {
        newPrice = _type == IGravixVault.PositionType.Long ?
            math.muldiv(price, (Constants.HUNDRED_PERCENT + spread), Constants.HUNDRED_PERCENT) :
            math.muldiv(price, (Constants.HUNDRED_PERCENT - spread), Constants.HUNDRED_PERCENT);
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } newPrice;
    }

    function applyCloseSpread(uint128 price, IGravixVault.PositionType _type, uint128 spread) public pure responsible returns (uint128 newPrice) {
        newPrice = _type == IGravixVault.PositionType.Long ?
            math.muldiv(price, (Constants.HUNDRED_PERCENT - spread), Constants.HUNDRED_PERCENT) :
            math.muldiv(price, (Constants.HUNDRED_PERCENT + spread), Constants.HUNDRED_PERCENT);
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } newPrice;
    }

    function getPosition(uint32 posKey) external view responsible returns (Position position) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } positions[posKey];
    }

    function getPositionsView(ViewInput[] inputs) external view responsible returns (PositionView[] positionsViews) {
        for (ViewInput input: inputs) {
            positionsViews.push(getPositionView(input));
        }

        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }positionsViews;
    }

    function getPositionView(ViewInput input) public view responsible returns (PositionView positionView) {
        Position position = positions[input.positionKey];
        require (position.createdAt != 0, Errors.POSITION_NOT_FOUND);

        bool isLong = position.positionType == IGravixVault.PositionType.Long;

        uint128 collateral = position.initialCollateral - position.openFee;
        uint128 leveragedPositionUsd = math.muldiv(collateral, position.leverage, Constants.LEVERAGE_BASE);
        uint128 leveragedPositionAsset = math.muldiv(leveragedPositionUsd, Constants.PRICE_DECIMALS, position.openPrice);

        // borrow fee
        uint32 timePassed = now - position.createdAt;
        uint128 borrowFeeShare = math.muldiv(position.borrowBaseRatePerHour, timePassed, Constants.HOUR);
        uint128 borrowFeeUsd = math.muldiv(borrowFeeShare, leveragedPositionUsd, Constants.HUNDRED_PERCENT);

        // funding
        int256 newAccFunding = isLong ? input.funding.accLongUSDFundingPerShare : input.funding.accShortUSDFundingPerShare;
        int256 fundingDebt = math.muldiv(leveragedPositionAsset, position.accUSDFundingPerShare, Constants.SCALING_FACTOR);
        // if fundingFee > 0, trader pays
        int256 fundingFeeUsd = math.muldiv(leveragedPositionAsset, newAccFunding, Constants.SCALING_FACTOR) - fundingDebt;
        // close price
        uint128 closePrice = applyCloseSpread(input.assetPrice, position.positionType, position.baseSpreadRate);
        // pnl (no funding and borrow fees)
        // (closePrice/openPrice - 1)
        int256 pnl = int256(math.muldiv(closePrice, Constants.SCALING_FACTOR, position.openPrice)) - Constants.SCALING_FACTOR;
        // * (-1) for shorts
        pnl = isLong ? pnl : -pnl;
        // * collateral * leverage
        pnl = math.muldiv(pnl, leveragedPositionUsd, Constants.SCALING_FACTOR);
        // liquidation price
        // collateral * 0.9
        int256 liqPriceDist = math.muldiv(collateral, (Constants.HUNDRED_PERCENT - position.liquidationThresholdRate),  Constants.HUNDRED_PERCENT);
        // - borrowFee - fundingFeeUsd
        liqPriceDist -= borrowFeeUsd + fundingFeeUsd;
        // * openPrice / collateral / leverage
        liqPriceDist = math.muldiv(position.openPrice, liqPriceDist, leveragedPositionUsd);

        int256 _liqPrice_raw = isLong ?
            math.muldiv(position.openPrice - liqPriceDist, Constants.HUNDRED_PERCENT, Constants.HUNDRED_PERCENT - position.baseSpreadRate) :
            math.muldiv(position.openPrice + liqPriceDist, Constants.HUNDRED_PERCENT, Constants.HUNDRED_PERCENT + position.baseSpreadRate);
        uint128 liqPrice = uint128(math.max(_liqPrice_raw, 0)); // price cant be negative

        int256 upPos = leveragedPositionUsd + pnl - fundingFeeUsd - borrowFeeUsd;
        uint128 closeFee = uint128(math.muldiv(math.max(upPos, 0), position.closeFeeRate, Constants.HUNDRED_PERCENT));

        // now check if position could be liquidated
        //        int256 currentCollateral = collateral - borrowFee - fundingFee + pnl;
        //        uint128 liqThreshold = math.muldiv(collateral, position.liquidationThresholdRate, Constants.HUNDRED_PERCENT);
        //        bool liquidate = currentCollateral <= liqThreshold;
        bool liquidate = isLong ? input.assetPrice <= liqPrice : input.assetPrice >= liqPrice;

        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }PositionView(
            position,
            leveragedPositionUsd,
            closePrice,
            borrowFeeUsd,
            fundingFeeUsd,
            closeFee,
            liqPrice,
            pnl,
            liquidate,
            now
        );
    }

    function _getGravixAccountAddress(address _user) internal view returns (address) {
        return address(tvm.hash(_buildGravixAccountInitData(_buildGravixAccountParams(_user))));
    }

    function _buildGravixAccountParams(address _user) internal pure returns (TvmCell) {
        TvmBuilder builder;
        builder.store(_user);
        return builder.toCell();
    }

    function _buildGravixAccountInitData(TvmCell _initialData) internal view returns (TvmCell) {
        return tvm.buildStateInit({
            contr: Platform,
            varInit: {
                root: vault,
                platformType: PlatformTypes.GravixAccount,
                initialData: _initialData,
                platformCode: platformCode
            },
            pubkey: 0,
            code: platformCode
        });
    }

    function requestUpgrade(address _user,uint32 _currentVersion, Callback.CallMeta _meta) internal view {
        IGravixVault(vault).onGravixAccountRequestUpgrade{value: Gas.GRAVIX_ACC_UPGRADE_VALUE}(
            _user,
            _currentVersion,
            _meta
        );
    }


    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }


    modifier reserve() {
        tvm.rawReserve(_reserve(), 0);
        _;
    }

    modifier onlyGravixVault() {
        require (msg.sender == vault, Errors.NOT_VAULT);
        _;
    }
}

