pragma ever-solidity ^0.62.0;


import "./GravixAccountStorage.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "../../libraries/Gas.tsol";
import "../../libraries/Callback.tsol";
import "../../libraries/PlatformTypes.tsol";
import "../../libraries/Errors.tsol";
import "../../libraries/Constants.tsol";
import "../../libraries/GravixMath.tsol";
import {RPlatform as Platform} from "../../Platform.tsol";


abstract contract GravixAccountHelpers is GravixAccountStorage {
    function getDetails() external view responsible returns (
        uint32 _currentVersion, address _vault, address _user, address _referrer, address _grandReferrer, uint128 _referralBalance
    ) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (currentVersion, vault, user, referrer, grandReferrer, referralBalance);
    }

    function getReferrer() external view override responsible returns (address _user, address _referrer) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (user, referrer);
    }


    // @param price - 8 decimals number
    function applyOpenSpread(uint128 price, IGravixVault.PositionType _type, uint128 spread) public pure responsible returns (uint128 newPrice) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } GravixMath.applyOpenSpread(price, _type, spread);
    }

    // @param price - 8 decimals number
    function applyCloseSpread(uint128 price, IGravixVault.PositionType _type, uint128 spread) public pure responsible returns (uint128 newPrice) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } GravixMath.applyCloseSpread(price, _type, spread);
    }

    function getPosition(uint32 posKey) external view responsible returns (Position position) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } positions[posKey];
    }

    function getPositionsView(ViewInput[] inputs) external view responsible returns (PositionView[] positionsViews) {
        for (ViewInput input: inputs) {
            positionsViews.push(getPositionView(input));
        }

        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }positionsViews;
    }

    function _getReferrer() internal view returns (address _referrer) {
        _referrer = referrerChecked ? referrer : address(0);
    }
    function _getGrandReferrer() internal view returns (address _grandReferrer) {
        _grandReferrer = grandReferrerChecked ? grandReferrer : address(0);
    }

    function isLatestVersion(uint32 _version) internal view returns(bool) {
        return _version == currentVersion;
    }

    function getPositionView(ViewInput input) public view responsible returns (PositionView positionView) {
        Position position = positions[input.positionKey];
        require (position.createdAt != 0, Errors.POSITION_NOT_FOUND);

        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        }_getPositionView(
            position,
            ViewInputInternal({
                funding: input.funding,
                assetPrice: input.assetPrice
            })
        );
    }

    function getPositionViewInternal(Position _position,uint128 _assetPrice) internal view returns (PositionView positionView) {
        bool isLong = _position.positionType == IGravixVault.PositionType.Long;

        ViewInputInternal input = ViewInputInternal({
            assetPrice: _assetPrice,
            funding: IGravixVault.Funding({
                accLongUSDFundingPerShare: isLong ? _position.accUSDFundingPerShare : 0,
                accShortUSDFundingPerShare: isLong ? 0 : _position.accUSDFundingPerShare
            })
        });

        return _getPositionView(_position, input);
    }

    function _getPositionView(Position _position, ViewInputInternal input) internal view returns (PositionView positionView) {
        bool isLong = _position.positionType == IGravixVault.PositionType.Long;

        uint128 collateral = _position.initialCollateral - _position.openFee;
        uint128 leveragedPositionUsd = math.muldiv(collateral, _position.leverage, Constants.LEVERAGE_BASE);
        uint128 leveragedPositionAsset = math.muldiv(leveragedPositionUsd, Constants.PRICE_DECIMALS, _position.openPrice);

        // borrow fee
        uint32 timePassed = now - _position.createdAt;
        uint128 borrowFeeShare = math.muldiv(_position.borrowBaseRatePerHour, timePassed, Constants.HOUR);
        uint128 borrowFeeUsd = math.muldiv(borrowFeeShare, leveragedPositionUsd, Constants.HUNDRED_PERCENT);

        // funding
        int256 newAccFunding = isLong ? input.funding.accLongUSDFundingPerShare : input.funding.accShortUSDFundingPerShare;
        int256 fundingDebt = math.muldiv(leveragedPositionAsset, _position.accUSDFundingPerShare, Constants.SCALING_FACTOR);
        // if fundingFee > 0, trader pays
        int256 fundingFeeUsd = math.muldiv(leveragedPositionAsset, newAccFunding, Constants.SCALING_FACTOR) - fundingDebt;
        // close price
//        uint128 stopLossTriggerPrice = _position.stopLoss.hasValue() ? _position.stopLoss.get().triggerPrice : 0;
//        uint128 takeProfitTriggerPrice = _position.takeProfit.hasValue() ? _position.takeProfit.get().triggerPrice : 0;

//        bool isClosedByStop = stopLossTriggerPrice == input.assetPrice || takeProfitTriggerPrice == input.assetPrice;

        uint128 closePrice = applyCloseSpread(input.assetPrice, _position.positionType, _position.baseSpreadRate);
        // pnl (no funding and borrow fees)
        int256 pnl = GravixMath.calculatePnl(
            _position.openPrice, closePrice, _position.positionType, leveragedPositionUsd
        );
        // liquidation price
        uint128 liqPrice = GravixMath.calculateLiquidationPrice(
            _position.openPrice,
            collateral,
            _position.positionType,
            borrowFeeUsd,
            fundingFeeUsd,
            leveragedPositionUsd,
            _position.liquidationThresholdRate,
            _position.baseSpreadRate
        );

        int256 upPos = leveragedPositionUsd + pnl - fundingFeeUsd - borrowFeeUsd;
        uint128 closeFee = uint128(math.muldiv(math.max(upPos, 0), _position.closeFeeRate, Constants.HUNDRED_PERCENT));

        // now check if position could be liquidated
        //        int256 currentCollateral = collateral - borrowFee - fundingFee + pnl;
        //        uint128 liqThreshold = math.muldiv(collateral, position.liquidationThresholdRate, Constants.HUNDRED_PERCENT);
        //        bool liquidate = currentCollateral <= liqThreshold;
        bool liquidate = isLong ? input.assetPrice <= liqPrice : input.assetPrice >= liqPrice;

        return PositionView(
            _position,
            leveragedPositionUsd,
            closePrice,
            borrowFeeUsd,
            fundingFeeUsd,
            closeFee,
            liqPrice,
            pnl,
            liquidate,
            now
        );
    }


    function _getGravixAccountAddress(address _user) internal view returns (address) {
        return address(tvm.hash(_buildGravixAccountInitData(_buildGravixAccountParams(_user))));
    }

    function _buildGravixAccountParams(address _user) internal pure returns (TvmCell) {
        TvmBuilder builder;
        builder.store(_user);
        return builder.toCell();
    }

    function _buildGravixAccountInitData(TvmCell _initialData) internal view returns (TvmCell) {
        return tvm.buildStateInit({
            contr: Platform,
            varInit: {
                root: vault,
                platformType: PlatformTypes.GravixAccount,
                initialData: _initialData,
                platformCode: platformCode
            },
            pubkey: 0,
            code: platformCode
        });
    }

    function requestUpgrade(address _user,uint32 _currentVersion, Callback.CallMeta _meta) internal view {
        IGravixVault(vault).onGravixAccountRequestUpgrade{value: Gas.GRAVIX_ACC_UPGRADE_VALUE}(
            _user,
            _currentVersion,
            _meta
        );
    }

    // basic check for adequate trigger prices
    function validateTriggerPrices(
        uint128 collateral, // collateral - open fee
        uint32 leverage,
        uint128 borrowFee,
        uint128 fundingFee,
        IGravixVault.PositionType positionType,
        uint64 baseSpreadRate,
        uint64 maxPnlRate, // usually 300%
        uint64 minStopLossRate, // usually 25%
        uint128 marketPrice, // position open price when executing order / market price when updating SL/TP
        uint128 takeProfitTriggerPrice,
        uint128 stopLossTriggerPrice
    ) internal pure returns (bool correct) {
        uint128 leveragedPosition = math.muldiv(collateral, leverage, Constants.LEVERAGE_BASE);

        correct = true;
        bool isLong = positionType == IGravixVault.PositionType.Long;
        if (stopLossTriggerPrice > 0) {
            // we can calculate price by just providing stop loss threshold instead of liq threshold
            uint128 minStopLossPrice = GravixMath.calculateLiquidationPrice(
                marketPrice,
                collateral,
                positionType,
                borrowFee,
                fundingFee,
                leveragedPosition,
                minStopLossRate,
                baseSpreadRate
            );

            correct = correct && isLong
                ? stopLossTriggerPrice < marketPrice
                : stopLossTriggerPrice > marketPrice;
            correct = correct && isLong
                ? stopLossTriggerPrice > minStopLossPrice
                : stopLossTriggerPrice < minStopLossPrice;
        }

        if (takeProfitTriggerPrice > 0) {
            uint128 pnlLimit = math.muldiv(collateral, maxPnlRate, Constants.HUNDRED_PERCENT);
            uint128 takeProfitClosePrice = applyCloseSpread(takeProfitTriggerPrice, positionType, baseSpreadRate);
            int256 takeProfitPnl = GravixMath.calculatePnl(
                marketPrice,
                takeProfitClosePrice,
                positionType,
                leveragedPosition
            );

            correct = correct && isLong
                ? takeProfitTriggerPrice > marketPrice
                : takeProfitTriggerPrice < marketPrice;
            correct = correct && takeProfitPnl <= pnlLimit;
        }
    }

    function validateTriggerPrices(
        uint128 collateral, // collateral - open fee
        uint32 leverage,
        IGravixVault.PositionType positionType,
        uint64 baseSpreadRate,
        uint64 maxPnlRate, // usually 300%
        uint64 minStopLossRate, // usually 25%
        uint128 marketPrice, // position open price when executing order / market price when updating SL/TP
        uint128 takeProfitTriggerPrice,
        uint128 stopLossTriggerPrice
    ) internal pure returns (bool correct) {
        return validateTriggerPrices(
            collateral,
            leverage,
            0,
            0,
            positionType,
            baseSpreadRate,
            maxPnlRate,
            minStopLossRate,
            marketPrice,
            takeProfitTriggerPrice,
            stopLossTriggerPrice
        );
    }

    function isStopLoosePosition(
        Position _position
    ) internal pure returns (bool) {
       return _position.stopLoss.hasValue();
    }
    function isTakeProfitPosition(
        Position _position
    ) internal pure returns (bool) {
        return _position.takeProfit.hasValue();
    }

    function isStopLooseReady(
        Position _position,
        uint128 _assetPrice
    ) internal returns (bool) {
        optional(IGravixVault.StopOrder) stopLoss = _position.stopLoss;
        if (!stopLoss.hasValue()) {
            return false;
        }

        uint128 stopLossTriggerPrice = stopLoss.get().triggerPrice;

        return _position.positionType == IGravixVault.PositionType.Long
            ?  stopLossTriggerPrice >= _assetPrice
            : stopLossTriggerPrice < _assetPrice;
    }

    function isTakeProfitReady(
        Position _position,
        uint128 _assetPrice
    ) internal returns (bool) {
        optional(IGravixVault.StopOrder) takeProfit = _position.takeProfit;
        if (!takeProfit.hasValue()) {
            return false;
        }

        uint128 takeProfitTriggerPrice = takeProfit.get().triggerPrice;

        return _position.positionType == IGravixVault.PositionType.Long
            ? takeProfitTriggerPrice <= _assetPrice
            : takeProfitTriggerPrice > _assetPrice;
    }

    function convertStopPriceToStopOrder(uint128 _stopPrice) internal pure returns (optional(IGravixVault.StopOrder)) {
        if (_stopPrice == 0) {
            return null;
        }
        return IGravixVault.StopOrder({
            triggerPrice: _stopPrice,
            createdAt: now
        });
    }

    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }


    modifier reserve() {
        tvm.rawReserve(_reserve(), 0);
        _;
    }

    modifier onlyGravixVault() {
        require (msg.sender == vault, Errors.NOT_VAULT);
        _;
    }
}

