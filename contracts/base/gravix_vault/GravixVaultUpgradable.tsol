pragma ever-solidity ^0.62.0;


import "@broxus/tip3/contracts/interfaces/ITokenRootUpgradeable.tsol";
import "@broxus/tip3/contracts/interfaces/ITokenWalletUpgradeable.tsol";
import "@broxus/tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "../../libraries/Gas.tsol";
import "../../libraries/Callback.tsol";
import "../../libraries/Errors.tsol";
import "../../libraries/Callback.tsol";
import "./GravixVaultHelpers.tsol";
import {RPlatform as Platform} from "../../Platform.tsol";


abstract contract GravixVaultUpgradable is GravixVaultHelpers {
    function updateGravixAccountCode(TvmCell code, Callback.CallMeta meta) external onlyManager reserveAndSendGas(meta) {
        gravixAccountCode.code = code;
        gravixAccountCode.version += 1;
        emit GravixAccountCodeUpdate(
            meta.callId,
            gravixAccountCode.version - 1,
            gravixAccountCode.version
        );
    }

    function updateOracleProxyCode(TvmCell code, Callback.CallMeta meta) external onlyManager reserveAndSendGas(meta) {
        oracleProxyCode.code = code;
        oracleProxyCode.version += 1;
        emit OracleProxyCodeUpdate(
            meta.callId,
            oracleProxyCode.version - 1,
            oracleProxyCode.version
        );
    }

    function upgradeGravixAccount(Callback.CallMeta meta) external view reserve {
        require (msg.value >= Gas.GRAVIX_ACC_UPGRADE_VALUE, Errors.LOW_MSG_VALUE);

        _upgradeGravixAccountByUser(msg.sender, 0, meta);
    }

    function forceUpgradeGravixAccountsByUsers(address[] users, Callback.CallMeta meta) external view onlyManager reserve {
        require (msg.value >= Gas.GRAVIX_ACC_UPGRADE_VALUE * (users.length + 1), Errors.LOW_MSG_VALUE);

        for (uint i = 0; i < users.length; i++) {
            _upgradeGravixAccountByUser(users[i], Gas.GRAVIX_ACC_UPGRADE_VALUE, meta);
        }
    }

    function forceUpgradeGravixAccountsByContracts(address[] contracts, Callback.CallMeta meta) external view onlyManager reserve {
        require (msg.value >= Gas.GRAVIX_ACC_UPGRADE_VALUE * (contracts.length + 1), Errors.LOW_MSG_VALUE);

        for (uint i = 0; i < contracts.length; i++) {
            _upgradeGravixAccountByContract(contracts[i], Gas.GRAVIX_ACC_UPGRADE_VALUE, meta);
        }
    }

    function _upgradeGravixAccountByContract(address gravixAcc, uint128 value, Callback.CallMeta meta) internal view {
        uint16 flag = value == 0 ? MsgFlag.ALL_NOT_RESERVED : 0;
        IGravixAccount(gravixAcc).upgrade{ value: value, flag: flag }(
            gravixAccountCode.code,
            gravixAccountCode.version,
            meta
        );
    }

    function _upgradeGravixAccountByUser(address user, uint128 value, Callback.CallMeta meta) internal view {
        address gravixAcc = getGravixAccountAddress(user);
        uint16 flag = value == 0 ? MsgFlag.ALL_NOT_RESERVED : 0;
        IGravixAccount(gravixAcc).upgrade{ value: value, flag: flag }(
            gravixAccountCode.code,
            gravixAccountCode.version,
            meta
        );
    }

    function onGravixAccountRequestUpgrade(
        address _user,
        uint32 _accountVersion,
        Callback.CallMeta _meta
    ) external override onlyGravixAccount(_user) reserve {
        if (_accountVersion == gravixAccountCode.version) {
            _user.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
        } else {
            _upgradeGravixAccountByContract(msg.sender, 0, _meta);
        }
    }
    function onGravixAccountUpgrade(
        address user,
        uint32 oldVersion,
        uint32 newVersion,
        Callback.CallMeta meta
    ) external view override onlyGravixAccount(user) reserveAndSuccessCallback(meta) {
        emit GravixAccountUpgrade(meta.callId, user, oldVersion, newVersion);
    }

    function onGravixAccountDeploy(
        address user, Callback.CallMeta meta
    ) external view override onlyGravixAccount(user) reserveAndSuccessCallback(meta) {
        emit GravixAccountDeploy(meta.callId, user);
    }

    function deployGravixAccount(
        address referrer, Callback.CallMeta meta
    ) external view responsible reserveAndSendGas(meta) returns (address account) {
        require (msg.value > Gas.GRAVIX_ACCOUNT_DEPLOY_VALUE, Errors.LOW_MSG_VALUE);
        referrer = referrer == msg.sender ? address(0) : referrer;
        account = _deployGravixAccount(msg.sender, referrer);
    }

    function _deployGravixAccount(address user, address referrer) internal view returns (address) {
        TvmBuilder constructorParams;

        constructorParams.store(gravixAccountCode.version); // 32
        constructorParams.store(gravixAccountCode.version); // 32
        constructorParams.store(referrer); // 267

        return new Platform{
            stateInit: _buildGravixAccountInitData(_buildGravixAccountParams(user)),
            value: Gas.GRAVIX_ACCOUNT_DEPLOY_VALUE
        }(gravixAccountCode.code, constructorParams.toCell(), user);
    }
}
