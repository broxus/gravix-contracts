pragma ever-solidity ^0.62.0;


import {GravixVaultUpgradable} from "./GravixVaultUpgradable.tsol";
import {Callback} from "../../libraries/Callback.tsol";
import {GravixVaultStorage} from "./GravixVaultStorage.tsol";
import {Errors} from "../../libraries/Errors.tsol";
import {Constants} from "../../libraries/Constants.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import {ITokenRoot} from "@broxus/tip3/contracts/interfaces/ITokenRoot.tsol";
import {Gas} from "../../libraries/Gas.tsol";
import {IBurnableTokenWallet} from "@broxus/tip3/contracts/interfaces/IBurnableTokenWallet.tsol";


abstract contract GravixVaultLiquidityPool is GravixVaultUpgradable {
    // ----------------------------------------------------------------------------------
    // --------------------------- LIQUIDITY POOL ---------------------------------------
    // ----------------------------------------------------------------------------------
    function withdrawInsuranceFundOverflow(Callback.CallMeta meta) external onlyOwner reserveAndSuccessCallback(meta) {
        require (insuranceFund.limit < insuranceFund.balance, Errors.LOW_INSURANCE_FUND);
        require (treasuries.treasury != address.makeAddrStd(0, 0), Errors.ZERO_ADDRESS);
        require (treasuries.projectFund != address.makeAddrStd(0, 0), Errors.ZERO_ADDRESS);
        require (treasuries.devFund != address.makeAddrStd(0, 0), Errors.ZERO_ADDRESS);
        uint128 overflow = insuranceFund.balance - insuranceFund.limit;
        _decreaseInsuranceFund(overflow);

        uint128 _treasuryAmount = math.muldiv(
            overflow,
            insuranceFundOverflowDistributionSchema[uint8(InsuranceFundOverflowDistributionSchema.Treasury)],
            Constants.HUNDRED_PERCENT
        );
        uint128 _projectFundAmount = math.muldiv(
            overflow,
            insuranceFundOverflowDistributionSchema[uint8(InsuranceFundOverflowDistributionSchema.ProjectFund)],
            Constants.HUNDRED_PERCENT
        );
        uint128 _devFundAmount = overflow - _treasuryAmount - _projectFundAmount;

        TvmCell empty;
        _transfer(
            usdt.wallet,
            _treasuryAmount,
            treasuries.treasury,
            empty,
            meta.sendGasTo,
            MsgFlag.SENDER_PAYS_FEES
        );

        _transfer(
            usdt.wallet,
            _projectFundAmount,
            treasuries.projectFund,
            empty,
            meta.sendGasTo,
            MsgFlag.SENDER_PAYS_FEES
        );

        _transfer(
            usdt.wallet,
            _devFundAmount,
            treasuries.devFund,
            empty,
            meta.sendGasTo,
            MsgFlag.SENDER_PAYS_FEES
        );

        emit InsuranceFundWithdraw(meta.callId, _treasuryAmount, _projectFundAmount, _devFundAmount);
    }

    function _handleInsuranceDeposit(address user, uint128 amount, Callback.CallMeta meta) internal returns(bool) {
        if (msg.value < Gas.DEPOSIT_USDT_FEE) {
            return false;
        }
        _increaseInsuranceFund(amount);
        emit InsuranceFundDeposit(meta.callId, user, amount);
        meta.sendGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
        return true;
    }

    function _handleUsdtDeposit(
        address user, uint128 amount, Callback.CallMeta meta
    ) internal returns (bool) {
        if (msg.value < Gas.DEPOSIT_USDT_FEE) {
            return false;
        }
        uint128 mintAmount = usdtToStgUsdt(amount);

        poolAssets.balance += amount;
        poolAssets.stgUsdtSupply += mintAmount;

        emit LiquidityPoolDeposit(meta.callId, user, amount, mintAmount);

        ITokenRoot(stgUsdt.root).mint{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            mintAmount, user, Gas.DEPOSIT_USDT_FEE / 2, meta.sendGasTo, true, _makeCell(meta.nonce)
        );
        return true;
    }

    function _handleStgUsdtDeposit(address user, uint128 amount, Callback.CallMeta meta) internal view returns(bool) {
        if (msg.value < Gas.BURN_STG_USDT_FEE) {
            return false;
        }
        TvmBuilder builder;
        builder.store(user);
        builder.store(meta);
        IBurnableTokenWallet(stgUsdt.wallet).burn{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            amount, meta.sendGasTo, address(this), builder.toCell()
        );
        return true;
    }

    function _handleStgUsdtBurn(uint128 stgUsdtAmount, TvmCell payload) internal {
        TvmSlice slice = payload.toSlice();

        address user = slice.decode(address);
        Callback.CallMeta meta = slice.decode(Callback.CallMeta);

        uint128 usdtAmount = stgUsdtToUsdt(stgUsdtAmount);

        poolAssets.balance -= usdtAmount;
        poolAssets.stgUsdtSupply -= stgUsdtAmount;

        emit LiquidityPoolWithdraw(meta.callId, user, usdtAmount, stgUsdtAmount);

        ITokenWallet(usdtWallet).transfer{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            usdt_amount,
            user,
            Constants.DEPLOY_TOKEN_WALLET_VALUE,
            meta.send_gas_to,
            true,
            _makeCell(meta.nonce)
        );
    }

    function usdtToStgUsdt(uint128 usdtAmount) public view responsible returns (uint128 stgAmount) {
        if (poolAssets.stgUsdtSupply == 0) {
            stgAmount = usdtAmount;
        } else {
            (uint128 inPrice,) = stgUsdtPrice();
            stgAmount = math.muldiv(usdtAmount, Constants.PRICE_DECIMALS, inPrice);
        }
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }stgAmount;
    }

    function stgUsdtToUsdt(uint128 stgAmount) public view responsible returns (uint128 usdtAmount) {
        if (poolAssets.stgUsdtSupply == 0) {
            usdtAmount = stgAmount;
        } else {
            (,uint128 outPrice) = stgUsdtPrice();
            usdtAmount = math.muldiv(stgAmount, outPrice, Constants.PRICE_DECIMALS);
        }
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }usdtAmount;
    }

    // @dev Prices are multiplied by 10**8
    // in price could be higher in case of under collateralization
    function stgUsdtPrice() public view responsible returns (uint128 inPrice, uint128 outPrice) {
        if (poolAssets.stgUsdtSupply == 0) {
            (inPrice, outPrice) = (Constants.PRICE_DECIMALS, Constants.PRICE_DECIMALS);
        } else {
            // out price is current real price
            outPrice = math.muldiv(poolAssets.balance, Constants.PRICE_DECIMALS, poolAssets.stgUsdtSupply);
            // if we are in under collateralized state
            inPrice = poolAssets.targetPrice > 0 ? poolAssets.targetPrice : outPrice;
        }
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }(inPrice, outPrice);
    }

    function poolDebt() public view returns (uint128) {
        uint128 targetBalance = math.muldiv(poolAssets.stgUsdtSupply, poolAssets.targetPrice, Constants.PRICE_DECIMALS);
        return poolAssets.balance >= targetBalance ? 0 : targetBalance - poolAssets.balance;
    }
    // ----------------------------------------------------------------------------------
    // --------------------------- MONEY FLOW MUTATORS ----------------------------------
    // ----------------------------------------------------------------------------------
    function _collectOpenFee(uint128 amount) internal {
        _collectFeeWithSchema(openFeeDistributionSchema, amount);
    }

    function _collectCloseFee(uint128 amount) internal {
        _collectFeeWithSchema(closeFeeDistributionSchema, amount);
    }

    function _collectFeeWithSchema(uint64[2] feeSchema, uint128 amount) internal {
        uint128 poolFee = math.muldiv(amount, feeSchema[uint8(FeeDistributionSchema.Pool)], Constants.HUNDRED_PERCENT);
        uint128 fundFee = amount - poolFee;

        if (fundFee > 0) _increaseInsuranceFund(fundFee);
        if (poolFee > 0) {
            poolAssets.balance += poolFee;
            emit LiquidityPoolFees(poolFee);
            // we are in undercollaterized state and recover is finished
            if (poolAssets.targetPrice > 0 && poolDebt() == 0) poolAssets.targetPrice = 0;
        }
    }

    function _decreaseInsuranceFund(uint128 amount) internal returns (uint128 debt) {
        if (amount <= insuranceFund.balance) {
            insuranceFund.balance -= amount;
        } else {
            uint128 delta = amount - insuranceFund.balance;
            // we just ran out of insurance fund, save target price
            if (poolAssets.targetPrice == 0) {
                (poolAssets.targetPrice,) = stgUsdtPrice();
            }
            if (delta > poolAssets.balance) {
                debt = delta - poolAssets.balance;
                delta = poolAssets.balance;
            }
            poolAssets.balance -= delta;
            insuranceFund.balance = 0;
        }
    }

    function _increaseInsuranceFund(uint128 amount) internal {
        if (poolAssets.targetPrice > 0) {
            uint128 debt = poolDebt();
            poolAssets.balance += math.min(debt, amount);
            amount -= math.min(debt, amount);
            if (amount > 0) poolAssets.targetPrice = 0;
        }
        insuranceFund.balance += amount;
    }
}
