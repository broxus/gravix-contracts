pragma ever-solidity ^0.62.0;


import {GravixVaultStorage} from "./GravixVaultStorage.tsol";
import {IGravixVault} from "../../interfaces/IGravixVault.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import {ICallbackReceiver} from "../../interfaces/ICallbackReceiver.tsol";
import {ITokenRoot} from "@broxus/tip3/contracts/interfaces/ITokenRoot.tsol";
import {Gas} from "../../libraries/Gas.tsol";
import {IPriceNode} from "../../interfaces/IPriceNode.tsol";
import {ITokenWallet} from "@broxus/tip3/contracts/interfaces/ITokenWallet.tsol";
import {OracleProxy} from "../../OracleProxy.tsol";
import {PlatformTypes} from "../../libraries/PlatformTypes.tsol";
import {Errors} from "../../libraries/Errors.tsol";
import {Callback} from "../../libraries/Callback.tsol";
import {DateTime as DateTimeLib} from "../../libraries/DateTime.tsol";
import {RPlatform as Platform} from "../../Platform.tsol";



abstract contract GravixVaultHelpers is GravixVaultStorage {
    function getDetails() external view responsible returns (
        Managers _managers,
        address _priceNode,
        uint256 _pricePubkey,
        TokenData _usdtToken,
        TokenData _stgUsdtToken,
        Treasuries _treasuries,
        PoolAssets _poolAssets,
        InsuranceFund _insuranceFunds, // collected fees, pnl and etc.,
        uint64[3] _insuranceFundOverflowDistributionSchema,
        uint64[3] _referralFeeSchema,
        uint64[3] _grandReferralFeeSchema,
        uint128 _collateralReserve, // sum of all usdt provided as a collateral for open order
        uint64 _maxPoolUtilRatio,
        uint64 _maxPnlRate,
        uint64 _minStopLossRate,
        uint128 _minPositionCollateral,
        bool _paused,
        LiquidationParams _liquidation,
        uint64[2] _openFeeDistributionSchema,
        uint64[2] _closeFeeDistributionSchema,
        uint64[2] _pnlDistributionSchema,
        uint32 _marketCount,
        address _limitBotVault
    ) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }(
            managers,
            priceNode,
            pricePubkey,
            usdt,
            stgUsdt,
            treasuries,
            poolAssets,
            insuranceFund,
            insuranceFundOverflowDistributionSchema,
            referralFeeSchema,
            grandReferralFeeSchema,
            collateralReserve, // sum of all usdt provided as a collateral for open order
            maxPoolUtilRatio,
            maxPnlRate,
            minStopLossRate,
            minPositionCollateral,
            paused,
            liquidationParams,
            openFeeDistributionSchema,
            closeFeeDistributionSchema,
            pnlDistributionSchema,
            marketCount,
            limitBotVault
        );
    }

    function getCodes() external view responsible returns (
        CodeWithVersion _oracleProxy,
        TvmCell _platformCode,
        CodeWithVersion _gravixAccount,
        uint32 _gravixVaultVersion
    ) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }(
        oracleProxyCode,
            platformCode,
        gravixAccountCode,
            gravixVaultVersion
        );
    }

    function _sendCallbackOrGas(address callbackReceiver, uint32 nonce, bool success, address sendGasTo) internal pure {
        if (nonce > 0) {
            if (success) {
                ICallbackReceiver(
                    callbackReceiver
                ).acceptSuccessCallback{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(nonce);
            } else {
                ICallbackReceiver(
                    callbackReceiver
                ).acceptFailCallback{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(nonce);
            }
        } else {
            sendGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
        }
    }

    function _setupTokenWallets() internal view {
        ITokenRoot(usdt.root).deployWallet{value: Gas.TOKEN_WALLET_DEPLOY_VALUE, callback: IGravixVault.receiveTokenWalletAddress }(
            address(this), // owner
            Gas.TOKEN_WALLET_DEPLOY_VALUE / 2 // deploy grams
        );
        ITokenRoot(stgUsdt.root).deployWallet{value: Gas.TOKEN_WALLET_DEPLOY_VALUE, callback: IGravixVault.receiveTokenWalletAddress }(
            address(this), // owner
            Gas.TOKEN_WALLET_DEPLOY_VALUE / 2 // deploy grams
        );
    }

    function _timeToDateTime(uint year, uint month, uint day, Time time) internal pure returns (DateTime dt) {
        return DateTime(uint16(year), uint8(month), uint8(day), time.hour, time.minute);
    }

    function _dateTimeToTimestamp(DateTime dt) internal pure returns (uint32) {
        return uint32(DateTimeLib.timestampFromDateTime(dt.year, dt.month, dt.day, dt.hour, dt.minute, 0));
    }

    function encodeMarketOrder(
        uint32 _marketIdx,
        PositionType _positionType,
        uint32 _leverage,
        uint128 _expectedPrice,
        uint64 _maxSlippageRate,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice,
        IPriceNode.Price _price,
        address _referrer,
        uint32 _nonce,
        uint32 _callId
    ) external pure returns (TvmCell payload) {
        TvmCell cell = abi.encode(
            _marketIdx,
            _positionType,
            _leverage,
            _expectedPrice,
            _maxSlippageRate,
            _stopLossTriggerPrice,
            _takeProfitTriggerPrice,
            _price,
            _referrer
        );
        return encodeTokenTransfer(Action.MarketOrder, _nonce, _callId, cell);
    }

    function decodeMarketOrder(
        TvmCell actionPayload
    ) public pure returns (
        uint32 marketIdx,
        PositionType positionType,
        uint32 leverage,
        uint128 expectedPrice,
        uint64 maxSlippageRate,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        IPriceNode.Price price,
        address referrer
    ) {
        (
            marketIdx,
            positionType,
            leverage,
            expectedPrice,
            maxSlippageRate,
            stopLossTriggerPrice,
            takeProfitTriggerPrice,
            price,
            referrer
        ) = abi.decode(
            actionPayload,
            (
                uint32,
                PositionType,
                uint32,
                uint128,
                uint64,
                uint128,
                uint128,
                IPriceNode.Price,
                address
            )
        );
    }

    function encodeLimitOrder(
        uint32 _marketIdx,
        PositionType _positionType,
        uint32 _leverage,
        uint128 _triggerPrice,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice,
        IPriceNode.Price _price,
        LimitOrderType _limitOrderType,
        address _referrer,
        uint32 _nonce,
        uint32 _callId
    ) external pure returns (TvmCell payload) {
        TvmCell cell = abi.encode(
            _marketIdx,
            _positionType,
            _leverage,
            _triggerPrice,
            _stopLossTriggerPrice,
            _takeProfitTriggerPrice,
            _limitOrderType,
            _price,
            _referrer
        );
        return encodeTokenTransfer(Action.LimitOrder, _nonce, _callId, cell);
    }

    function decodeLimitOrder(
        TvmCell actionPayload
    ) public pure returns (
        uint32 marketIdx,
        PositionType positionType,
        uint32 leverage,
        uint128 triggerPrice,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        LimitOrderType _limitOrderType,
        IPriceNode.Price price,
        address referrer
    ) {
        (
            marketIdx,
            positionType,
            leverage,
            triggerPrice,
            stopLossTriggerPrice,
            takeProfitTriggerPrice,
            _limitOrderType,
            price,
            referrer
        ) = abi.decode(
            actionPayload,
                (
                    uint32,
                    PositionType,
                    uint32,
                    uint128,
                    uint128,
                    uint128,
                    LimitOrderType,
                    IPriceNode.Price,
                    address
                )
        );
    }

    function encodeAddCollateral(
        uint32 marketIdx, uint32 positionKey, uint32 nonce, uint32 callId
    ) public pure returns (TvmCell payload) {
        return encodeTokenTransfer(Action.AddCollateral, nonce, callId, abi.encode(marketIdx, positionKey));
    }

    function decodeAddCollateral(TvmCell actionPayload) public pure returns (uint32 marketIdx, uint32 positionKey) {
        (marketIdx, positionKey) = abi.decode(actionPayload, (uint32, uint32));
    }

    function encodeLiquidityDeposit(uint32 nonce, uint32 callId) public pure returns (TvmCell payload) {
        TvmCell empty;
        return encodeTokenTransfer(Action.LiquidityDeposit, nonce, callId, empty);
    }

    function encodeLiquidityWithdraw(uint32 nonce, uint32 callId) public pure returns (TvmCell payload) {
        TvmCell empty;
        return encodeTokenTransfer(Action.LiquidityWithdraw, nonce, callId, empty);
    }

    function encodeInsuranceDeposit(uint32 nonce, uint32 callId) public pure returns (TvmCell payload) {
        TvmCell empty;
        return encodeTokenTransfer(Action.InsuranceDeposit, nonce, callId, empty);
    }

    function encodeTokenTransfer(
        Action action, uint32 nonce, uint32 callId, TvmCell actionPayload
    ) public pure returns (TvmCell payload) {
        return abi.encode(action, nonce, callId, actionPayload);
    }

    function decodeTokenTransfer(TvmCell payload) public pure returns (
        Action action,
        uint32 nonce,
        uint32 callId,
        TvmCell actionPayload,
        bool correct
    ){
        // check if payload assembled correctly
        TvmSlice slice = payload.toSlice();
        // 1 uint8 + 2 uint32 and 1 cell
        (uint16 bits, uint8 refs) = slice.size();
        if ((bits == 8 + 32 + 32) && (refs == 1) && payload.toSlice().decode(uint8) <= uint8(Action.RemoveCollateral)) {
            (action, nonce, callId, actionPayload) = abi.decode(payload, (Action, uint32, uint32, TvmCell));
            correct = true;
        }
    }

    function checkSign(
        uint128 p, uint32 t1, uint32 t2, string tick, TvmCell signature
    ) public view returns (bool) {
        TvmCell data = abi.encode(p, t1, t2, tick);
        return tvm.checkSign(tvm.hash(data), signature.toSlice(), pricePubkey);
    }

    function checkPrice(IPriceNode.Price price, PriceNode config) public view returns (bool) {
        if (price.ticker != config.ticker) return false;
        if (now - price.oracleTime > config.maxOracleDelay) return false;
        if (now - price.serverTime > config.maxServerDelay) return false;
        return checkSign(price.price, price.serverTime, price.oracleTime, price.ticker, price.signature);
    }

    function getGravixAccountAddress(address user) public view responsible returns (address) {
        return { value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false } address(
            tvm.hash(_buildGravixAccountInitData(_buildGravixAccountParams(user)))
        );
    }

    function getOracleProxyAddress(uint64 nonce) public view responsible returns (address) {
        return { value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false } address(
            tvm.hash(_buildOracleProxyInitData(nonce))
        );
    }

    function _makeCell(uint32 nonce) internal pure returns (TvmCell) {
        TvmBuilder builder;
        if (nonce > 0) {
            builder.store(nonce);
        }
        return builder.toCell();
    }

    function _transfer(
        address wallet, uint128 amount, address receiver, TvmCell payload, address sendGasTo, uint16 flag
    ) internal pure {
        uint128 value = flag != MsgFlag.ALL_NOT_RESERVED ? Gas.TOKEN_TRANSFER_VALUE : 0;
        bool notify = false;
        // notify = true if payload is non-empty
        TvmSlice slice = payload.toSlice();
        if (slice.bits() > 0 || slice.refs() > 0) {
            notify = true;
        }
        ITokenWallet(wallet).transfer{value: value, flag: flag}(
            amount,
            receiver,
            0,
            sendGasTo,
            notify,
            payload
        );
    }

    function _buildOracleProxyInitData(uint64 nonce) internal view returns (TvmCell) {
        return tvm.buildStateInit({
            contr: OracleProxy,
            varInit: {
                vault: address(this),
                nonce: nonce
            },
            pubkey: 0,
            code: oracleProxyCode.code
        });
    }

    function _buildGravixAccountParams(address user) internal pure returns (TvmCell) {
        TvmBuilder builder;
        builder.store(user);
        return builder.toCell();
    }

    function _buildGravixAccountInitData(TvmCell _initialData) internal view returns (TvmCell) {
        return tvm.buildStateInit({
            contr: Platform,
            varInit: {
                root: address(this),
                platformType: PlatformTypes.GravixAccount,
                initialData: _initialData,
                platformCode: platformCode
            },
            pubkey: 0,
            code: platformCode
        });
    }

    function getBaseOpenMarketOrderValue(bool _triggersExists) public pure returns(uint128) {
        uint128 valueForTriggers = _triggersExists ? Gas.EXECUTE_STOP_ORDER_VALUE : 0;
        return Gas.OPEN_ORDER_FEE
                + Gas.ORACLE_PROXY_DEPLOY
                + Gas.ORACLE_PROXY_CALL
                + valueForTriggers;
    }

    function getBaseOpenLimitOrderValue(bool _triggersExists) public pure returns(uint128) {
        uint128 valueForTriggers = _triggersExists ? Gas.EXECUTE_STOP_ORDER_VALUE : 0;
        return Gas.OPEN_ORDER_FEE
            + Gas.OPEN_LIMIT_ORDER_RESERVE
            + Gas.ORACLE_PROXY_DEPLOY
            + Gas.ORACLE_PROXY_CALL
            + valueForTriggers;
    }

    function getMinValueForContinueOpenMarketOrder(
        PendingMarketOrder _request
    ) internal pure returns (uint128) {
        bool hasTriggers = _request.stopLossTriggerPrice > 0 || _request.takeProfitTriggerPrice > 0;
        uint128 valueForReferrerRetrieval = _request.referrer == address(0) ? 0 : Gas.GET_REFERRER_VALUE;
        return Gas.GRAVIX_ACCOUNT_DEPLOY_VALUE
                + valueForReferrerRetrieval
                + getBaseOpenMarketOrderValue(hasTriggers);
    }

    function getMinValueForContinueOpenLimitOrder(
        PendingLimitOrder _request
    ) internal pure returns (uint128) {
        bool hasTriggers = _request.stopLossTriggerPrice > 0 || _request.takeProfitTriggerPrice > 0;
        uint128 valueForReferrerRetrieval = _request.referrer == address(0) ? 0 : Gas.GET_REFERRER_VALUE;

        return Gas.GRAVIX_ACCOUNT_DEPLOY_VALUE
                + valueForReferrerRetrieval
                + getBaseOpenLimitOrderValue(hasTriggers);
    }

    function getMinValueForClosePosition() public pure returns (uint128) {
        return Gas.CLOSE_POSITION_FEE
                + Gas.ORACLE_PROXY_DEPLOY
                + Gas.ORACLE_PROXY_CALL;
    }

    function getSetOrUpdateTriggersMinValue() public pure returns (uint128) {
        return Gas.SET_OR_UPDATE_TRIGGERS_FEE
                + Gas.ORACLE_PROXY_DEPLOY
                + Gas.ORACLE_PROXY_CALL;
    }

    modifier onlyGravixAccount(address user) {
        address gravixAccountAddr = getGravixAccountAddress(user);
        require (msg.sender == gravixAccountAddr, Errors.NOT_GRAVIX_ACCOUNT);
        _;
    }

    modifier onlyOracleProxy(uint64 nonce) {
        address proxy = getOracleProxyAddress(nonce);
        require (msg.sender == proxy, Errors.NOT_ORACLE_PROXY);
        _;
    }

    modifier onlyLimitBot() {
        require (msg.sender == managers.limitBot, Errors.NOT_LIMIT_BOT);
        _;
    }

    function _reserve() internal pure returns (uint128) {
        return math.max(address(this).balance - msg.value, CONTRACT_MIN_BALANCE);
    }

    modifier reserve() {
        tvm.rawReserve(_reserve(), 0);
        _;
    }

    modifier reserveAndSuccessCallback(Callback.CallMeta meta) {
        tvm.rawReserve(_reserve(), 0);
        _;
        _sendCallbackOrGas(msg.sender, meta.nonce, true, meta.sendGasTo);
    }

    modifier reserveAndFailCallback(Callback.CallMeta meta) {
        tvm.rawReserve(_reserve(), 0);
        _;
        _sendCallbackOrGas(msg.sender, meta.nonce, false, meta.sendGasTo);
    }

    modifier reserveAndSendGas(Callback.CallMeta meta) {
        tvm.rawReserve(_reserve(), 0);
        _;
        meta.sendGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
    }

    modifier onlyOwner() {
        require(msg.sender == managers.owner, Errors.NOT_OWNER);
        _;
    }

    modifier onlyManager() {
        require(msg.sender == managers.owner || msg.sender == managers.manager, Errors.NOT_OWNER);
        _;
    }

    modifier onlyMarketManager() {
        require (msg.sender == managers.owner || msg.sender == managers.marketManager || msg.sender == managers.manager, Errors.NOT_OWNER);
        _;
    }

    modifier onlyActive() {
        require (!paused || msg.sender == managers.owner, Errors.NOT_ACTIVE);
        _;
    }
}
