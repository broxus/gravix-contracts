pragma ever-solidity ^0.62.0;


import "../../interfaces/IGravixVault.tsol";


abstract contract GravixVaultStorage is IGravixVault {
    uint32 static deploy_nonce;

    address owner;
    address marketManager;

    address priceNode;
    address oracle;
    address usdt;
    address usdtWallet;
    address stgUsdt;
    address stgUsdtWallet;

    address treasury;
    address projectFund;
    address devFund;

    TvmCell static oracleProxyCode;
    TvmCell static platformCode;
    TvmCell static gravixAccountCode;
    uint32 gravixAccountVersion;
    uint32 oracleProxyVersion;
    uint32 gravixVaultVersion;

    // liquidity pool staff
    uint128 poolBalance; // liquidity deposits
    uint128 stgUsdtSupply; // amount of minted stgUsdt
    uint128 targetPrice;

    uint128 insuranceFund; // collected fees, pnl and etc.
    uint128 insuranceFundLimit;
    // 50%, 30%, 20%
    uint64[3] insuranceFundOverflowDistributionSchema = [HUNDRED_PERCENT / 2, (HUNDRED_PERCENT * 3) / 10, HUNDRED_PERCENT / 5];
    enum InsuranceFundOverflowDistributionSchema { Treasury, ProjectFund, DevFund }

    uint128 collateralReserve; // sum of all usdt provided as a collateral for open orders

    // total net open interest across all markets according to weights
    // market noi - abs of (sum of all open longs - sum of all open shorts)
    uint128 totalNOI;
    bool totalNOILimitEnabled;
    uint64 maxPoolUtilRatio = 1_000_000_000_000; // 100%, multiplied by 1_000_000_000_000
    uint128 minPositionCollateral = 5 * USDT_DECIMALS; // 5$

    bool paused;

    uint128 constant SCALING_FACTOR = 10**18;
    uint128 constant USDT_DECIMALS = 10**6;
    uint128 constant PRICE_DECIMALS = 10**8; // chainlink standard
    uint128 constant CONTRACT_MIN_BALANCE = 1 ever;
    uint8 constant LEVERAGE_BASE = 100; // 100 -> 1x
    uint8 constant WEIGHT_BASE = 100; // 100 -> 1x

    uint64 constant HUNDRED_PERCENT = 1_000_000_000_000; // 100%, this allows precision up to 0.0000000001%
    uint32 constant HOUR = 3600;

    uint64 liquidationThresholdRate = 100_000_000_000; // 10%
    uint64 liquidatorRewardShare = 20_000_000_000; // 2%. Share of liquidated collateral that liquidator collect

    uint64[2] openFeeDistributionSchema = [HUNDRED_PERCENT, 0];
    uint64[2] closeFeeDistributionSchema = [0, HUNDRED_PERCENT];
    enum OpenFeeDistributionSchema { Pool, InsuranceFund }

    uint32 marketCount = 0;
    mapping (uint32 => Market) markets;
    // 2.key - week day, if day is not presented in schedule - market doesnt work
    mapping (uint32 => mapping (uint8 => TimeInterval[])) workingHours;
    // 2.key - weekend interval start timestamp
    mapping (uint32 => mapping (uint32 => DateTimeInterval)) weekends;

    mapping (uint32 => OracleConfig) oracleConfigs;

    uint32 request_nonce = 0;
    mapping (uint32 => PendingMarketOrder) pending_market_requests;
}
