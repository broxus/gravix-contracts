pragma ever-solidity ^0.62.0;


import "../../interfaces/IGravixVault.tsol";
import "../../libraries/Constants.tsol";


abstract contract GravixVaultStorage is IGravixVault {
    uint32 static deployNonce;

    Managers managers;

    address priceNode;
    uint256 pricePubkey;

    TokenData usdt;
    TokenData stgUsdt;

    Treasuries treasuries;

    TvmCell static platformCode;
    uint32 gravixVaultVersion;
    CodeWithVersion oracleProxyCode;
    CodeWithVersion gravixAccountCode;

    // liquidity pool staff
    PoolAssets poolAssets;

    InsuranceFund insuranceFund;
    // 50%, 30%, 20%
    uint64[3] insuranceFundOverflowDistributionSchema = [
        Constants.HUNDRED_PERCENT / 2,
        (Constants.HUNDRED_PERCENT * 3) / 10,
        Constants.HUNDRED_PERCENT / 5
    ];
    enum InsuranceFundOverflowDistributionSchema { Treasury, ProjectFund, DevFund }

    uint64[3] referralFeeSchema = [
        Constants.HUNDRED_PERCENT / 10, // 10% from open fee
        Constants.HUNDRED_PERCENT / 10, // 10% from close fee
        Constants.HUNDRED_PERCENT / 100 // 1% from pnl
    ];
    uint64[3] grandReferralFeeSchema = [
        Constants.HUNDRED_PERCENT / 100, // 1% from open fee
        Constants.HUNDRED_PERCENT / 100, // 1% from close fee
        Constants.HUNDRED_PERCENT / 1000 // 0.1% from pnl
    ];
    enum ReferralFeeSchema { OpenFee, CloseFee, PnlFee } // same for referral and grandReferral

    uint128 collateralReserve; // sum of all usdt provided as a collateral for open orders

    // total net open interest across all markets according to weights
    // market noi - abs of (sum of all open longs - sum of all open shorts)
    uint128 totalNOI;
    bool totalNOILimitEnabled;
    uint64 maxPoolUtilRatio = 1_000_000_000_000; // 100%, multiplied by 1_000_000_000_000
    uint64 maxPnlRate = 3_000_000_000_000; // 300%, multiplied by 1_000_000_000_000
    uint128 minPositionCollateral = 5 * Constants.USDT_DECIMALS; // 5$

    bool paused;
    LiquidationParams liquidationParams = LiquidationParams({
        thresholdRate: 100_000_000_000, // 10%,
        rewardShare: 20_000_000_000 // 2%. Share of liquidated collateral that liquidator collect,
    });

    uint64[2] openFeeDistributionSchema = [Constants.HUNDRED_PERCENT, 0];
    uint64[2] closeFeeDistributionSchema = [0, Constants.HUNDRED_PERCENT];
    enum FeeDistributionSchema { Pool, InsuranceFund }

    uint32 marketCount = 0;
    mapping (uint32 => Market) markets;
    // 2.key - week day, if day is not presented in schedule - market doesnt work
    mapping (uint32 => mapping (uint8 => TimeInterval[])) workingHours;
    // 2.key - weekend interval start timestamp
    mapping (uint32 => mapping (uint32 => DateTimeInterval)) weekends;

    mapping (uint32 => OracleConfig) oracleConfigs;

    uint32 requestNonce = 0;
    mapping (uint32 => PendingMarketOrder) pendingMarketRequests;

    uint128 constant CONTRACT_MIN_BALANCE = 1 ever;

    // region dummy fields
    bool dummy1;
    bool dummy2;
    bool dummy3;
    bool dummy4;
    bool dummy5;
    bool dummy6;
    bool dummy7;
    bool dummy8;
    bool dummy9;
    bool dummy10;
    bool dummy11;
    bool dummy12;
    bool dummy13;
    //endregion
}
