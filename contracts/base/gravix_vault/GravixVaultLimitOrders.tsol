pragma ever-solidity ^0.62.0;


import "../../interfaces/IGravixAccount.tsol";
import "../../interfaces/IOracleProxy.tsol";
import "../../libraries/Callback.tsol";
import "./GravixVaultMarkets.tsol";
import "./GravixVaultOrdersBase.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


abstract contract GravixVaultLimitOrders is GravixVaultOrdersBase {

    // region request order
    function _handleLimitOrder(
        address _user,
        uint128 collateral,
        TvmCell orderParamsPayload,
        Callback.CallMeta meta
    ) internal returns (bool) {
        (
            uint32 marketIdx,
            PositionType positionType,
            uint32 leverage,
            uint128 triggerPrice,
            uint128 stopLossTriggerPrice,
            uint128 takeProfitTriggerPrice,
            LimitOrderType limitOrderType,
            IPriceNode.Price price,
            address referrer
        ) = decodeLimitOrder(orderParamsPayload);

        uint128 valueForTriggers = stopLossTriggerPrice > 0 || takeProfitTriggerPrice > 0
            ? Gas.TRIGGER_ORDER_VALUE
            : 0;

        require(
            msg.value >= Gas.MIN_MSG_VALUE + Gas.OPEN_LIMIT_ORDER_RESERVE + valueForTriggers,
            Errors.LOW_MSG_VALUE
        );

        if (!validateOrderParams(marketIdx, collateral, leverage, 0)) return false;
        if (checkPositionAllowed(
            marketIdx,
            collateral,
            leverage,
            triggerPrice,
            positionType) > 0
        ) return false;
        if (!marketOpen(marketIdx)) return false;

        _limitOrder(
            _user,
            marketIdx,
            positionType,
            collateral,
            leverage,
            triggerPrice,
            limitOrderType,
            stopLossTriggerPrice,
            takeProfitTriggerPrice,
            price,
            referrer,
            meta
        );
        return true;
    }

    function _limitOrder(
        address _user,
        uint32 _marketIdx,
        PositionType _positionType,
        uint128 _collateral,
        uint32 _leverage,
        uint128 _triggerPrice,
        LimitOrderType _limitOrderType,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        IPriceNode.Price _price,
        address _referrer,
        Callback.CallMeta _meta
    ) internal {
        OracleType priceSource = markets[_marketIdx].priceSource;
        OracleConfig oracleConf = oracleConfigs[_marketIdx];

        if (priceSource == OracleType.PriceNode && checkPrice(_price, oracleConf.priceNode)) {
            _requestLimitOrder(
                _user,
                _marketIdx,
                _positionType,
                _collateral,
                _leverage,
                _triggerPrice,
                _limitOrderType,
                stopLossTriggerPrice,
                takeProfitTriggerPrice,
                _referrer,
                _meta,
                _price.price
            );
            return;
        }
        _sendOpenLimitOrderOracleRequest(
            _user,
            requestNonce,
            _marketIdx,
            _collateral,
            _leverage,
            _positionType,
            _limitOrderType,
            _referrer,
            _triggerPrice,
            stopLossTriggerPrice,
            takeProfitTriggerPrice,
            _meta
        );
    }

    function _sendOpenLimitOrderOracleRequest(
        address _user,
        uint32 _positionKey,
        uint32 _marketIdx,
        uint128 _collateral,
        uint32 _leverage,
        PositionType _positionType,
        LimitOrderType _limitOrderType,
        address _referer,
        uint128 _triggerPrice,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        Callback.CallMeta _meta
    ) internal view {
        address proxy = _deployOracleProxy(_marketIdx, _meta);
        IOracleProxy(proxy).setRequestLimitCallback{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            _user,
            _positionKey,
            _collateral,
            _leverage,
            _positionType,
            _limitOrderType,
            _referer,
            _triggerPrice,
            stopLossTriggerPrice,
            takeProfitTriggerPrice
        );
    }
    function oracle_requestLimitOrder(
        uint64 _nonce,
        address _user,
        uint32 _marketIdx,
        PositionType _positionType,
        uint128 _collateral,
        uint32 _leverage,
        uint128 _triggerPrice,
        LimitOrderType _limitOrderType,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        address _referrer,
        Callback.CallMeta _meta,
        uint128 _assetPrice
    ) external override onlyOracleProxy(_nonce) reserve {
        _requestLimitOrder(
            _user,
            _marketIdx,
            _positionType,
            _collateral,
            _leverage,
            _triggerPrice,
            _limitOrderType,
            stopLossTriggerPrice,
            takeProfitTriggerPrice,
            _referrer,
            _meta,
            _assetPrice
        );
    }

    function _requestLimitOrder(
        address _user,
        uint32 _marketIdx,
        PositionType _positionType,
        uint128 _collateral,
        uint32 _leverage,
        uint128 _triggerPrice,
        LimitOrderType _limitOrderType,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice,
        address _referrer,
        Callback.CallMeta _meta,
        uint128 _assetPrice
    ) internal {
        Market _market = markets[_marketIdx];
        requestNonce += 1;

        PendingLimitOrder newRequest = PendingLimitOrder(
            _user,
            _marketIdx,
            _positionType,
            _collateral,
            _triggerPrice,
            _limitOrderType,
            _leverage,
            _market.fees.openFeeRate,
            _market.fees.closeFeeRate,
            _market.fees.baseSpreadRate,
            liquidationParams.thresholdRate,
            _market.fees.borrowBaseRatePerHour,
            _referrer,
            _assetPrice,
            _stopLossTriggerPrice,
            _takeProfitTriggerPrice,
            _meta
        );
        pendingLimitRequests[requestNonce] = newRequest;

        address gravixAcc = getGravixAccountAddress(_user);

        IGravixAccount(gravixAcc).process_requestLimitOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            requestNonce,
            newRequest,
            maxPnlRate,
            minStopLossRate,
            gravixAccountCode.version
        );
    }

    function revert_requestLimitOrder(
        uint32 _reqNonce,
        PendingLimitOrder _pendRequest
    ) external override onlyGravixAccount(_pendRequest.user) reserve {
        delete pendingLimitRequests[_reqNonce];
        emit LimitOrderRequestRevert(_pendRequest.meta.callId, _pendRequest.user);
        if (_pendRequest.collateral > 0) {
            _transfer(
                usdt.wallet,
                _pendRequest.collateral,
                _pendRequest.user,
                _makeCell(_pendRequest.meta.nonce),
                _pendRequest.meta.sendGasTo,
                MsgFlag.ALL_NOT_RESERVED
            );
        } else {
            _sendCallbackOrGas(
                _pendRequest.user,
                _pendRequest.meta.nonce,
                false, _pendRequest.meta.sendGasTo
            );
        }
    }

    function finish_requestLimitOrder(
        uint32 reqNonce,
        PendingLimitOrder request,
        uint32 positionKey
    ) external override onlyGravixAccount(request.user) reserve {
        delete pendingLimitRequests[reqNonce];
        collateralReserve += request.collateral;

        emit LimitOrder(
            request.meta.callId,
            request.user,
            request.marketIdx,
            request.positionType,
            request.orderType,
            request.collateral,
            request.triggerPrice,
            request.stopLossTriggerPrice,
            request.takeProfitTriggerPrice,
            request.leverage,
            positionKey
        );

        // reserve evers for feature order execution
        uint128 stopOrderValue = request.stopLossTriggerPrice > 0 || request.takeProfitTriggerPrice > 0
            ? Gas.TRIGGER_ORDER_VALUE
            : 0;

        limitBotVault.transfer({value: Gas.OPEN_LIMIT_ORDER_RESERVE + stopOrderValue});

        _sendCallbackOrGas(
            request.user,
            request.meta.nonce,
            true,
            request.meta.sendGasTo
        );
    }

    //endregion

    // region limit bot
    function executeLimitOrders(
        mapping (uint32 => ExecuteLimitOrderData) limitOrdersMap,
        Callback.CallMeta meta
    ) external override reserveAndSendGas(meta) onlyLimitBot {
        for ((uint32 marketIdx, ExecuteLimitOrderData limitOrders) : limitOrdersMap) {
            OracleType priceSource = markets[marketIdx].priceSource;
            OracleConfig oracleConf = oracleConfigs[marketIdx];


            // if market uses offchain oracle and we have valid price, we can liquidate positions right now
            if (priceSource == OracleType.PriceNode && checkPrice(limitOrders.price, oracleConf.priceNode)) {
                uint128 value = uint128(limitOrders.positions.length * Gas.EXECUTE_LIMIT_ORDER_VALUE);

                this.self_executeLimitOrders{value: value}(
                    limitOrders.positions,
                    limitOrders.price.price,
                    meta,
                    0
                );
                continue;
            }

            _sendExecuteLimitOracleRequest(
                marketIdx,
                managers.limitBot,
                limitOrders.positions,
                meta
            );
        }
    }
    //endregion

    //region execute limit orders
    function self_executeLimitOrders(
        LimitPositionIdx[] _limitPositions,
        uint128 _assetPrice,
        Callback.CallMeta _meta,
        uint256 _startIdx
    ) external reserve {
        require (msg.sender == address(this), Errors.BAD_SENDER);
        for (uint i = _startIdx; i < _limitPositions.length && i < _startIdx + Constants.LIQUIDATION_BATCH_SIZE; i++) {
            LimitPositionIdx limitPosition = _limitPositions[i];
            _executeLimitOrder(
                limitPosition.user,
                limitPosition.positionKey,
                limitPosition.marketIdx,
                limitPosition.collateral,
                limitPosition.leverage,
                limitPosition.positionType,
                _assetPrice,
                _meta
            );
        }

        if (_startIdx + Constants.LIQUIDATION_BATCH_SIZE < _limitPositions.length) {
            this.self_executeLimitOrders{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                _limitPositions,
                _assetPrice,
                _meta,
                _startIdx + Constants.LIQUIDATION_BATCH_SIZE
            );
        } else {
            _meta.sendGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED});
        }
    }

    function _sendExecuteLimitOracleRequest(
        uint32 _marketIdx,
        address _executor,
        LimitPositionIdx[] _limitPositions,
        Callback.CallMeta _meta
    ) internal view {
        uint128 value = uint128(_limitPositions.length * Gas.EXECUTE_LIMIT_ORDER_VALUE);
        address proxy = _deployOracleProxy(_marketIdx, _meta);
        IOracleProxy(proxy).setExecuteLimitCallback{
            value: value
        }(
            _executor,
            _limitPositions
        );
    }

    function oracle_executeLimitOrder(
        uint64 _nonce,
        LimitPositionIdx[] limitPositions,
        uint128 _assetPrice,
        Callback.CallMeta _meta
    ) external override onlyOracleProxy(_nonce) reserve {
        this.self_executeLimitOrders{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            limitPositions,
            _assetPrice,
            _meta,
            0
        );
    }

    function _executeLimitOrder(
        address _user,
        uint32 _positionKey,
        uint32 _marketIdx,
        uint128 _collateral,
        uint32 _leverage,
        PositionType _positionType,
        uint128 _assetPrice,
        Callback.CallMeta _meta
    ) internal {
        // reserve should be
        uint128 positionSizeAsset = calculatePositionAssetSize(_collateral, _leverage, _assetPrice);

        Funding _funding = _updateFunding(_marketIdx, _assetPrice);
        _addPositionToMarket(_marketIdx, positionSizeAsset, _assetPrice, _positionType);

        address gravixAcc = getGravixAccountAddress(_user);

        _meta = Callback.CallMeta({
            nonce: _meta.nonce,
            // return remaining evers from order creating
            sendGasTo: _user,
            callId: _meta.callId
        });

        int256 funding = _positionType == PositionType.Long ? _funding.accLongUSDFundingPerShare : _funding.accShortUSDFundingPerShare;

        IGravixAccount(gravixAcc).process_executeLimitOrder{
            value: Gas.EXECUTE_LIMIT_ORDER_VALUE - 0.06 ever
        }(
            _positionKey,
            _marketIdx,
            _collateral,
            _leverage,
            positionSizeAsset,
            _positionType,
            _assetPrice,
            funding,
            _meta,
            gravixAccountCode.version
        );

    }


    function revert_executeLimitOrder(
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint128,
        uint128 positionSizeAsset,
        uint128 assetPrice,
        PositionType positionType,
        Callback.CallMeta meta
    ) external override onlyGravixAccount(user) reserve {
        emit LimitOrderExecutionRevert(meta.callId, user, positionKey);
        _removePositionFromMarket(marketIdx, positionSizeAsset, assetPrice, positionType);

        limitBotVault.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED});
    }

    function finish_executeLimitOrder(
        address user,
        uint32 positionKey,
        IGravixAccount.Position newPos,
        address referrer,
        address grandReferrer,
        Callback.CallMeta meta
    ) external override onlyGravixAccount(user) reserveAndSuccessCallback(meta) {
        _collectOpenFeeAndReferral(newPos.openFee, referrer, grandReferrer, user, meta);
        collateralReserve -= newPos.openFee;

        uint128 positionSizeAssetRaw = calculatePositionAssetSize(newPos.initialCollateral, newPos.leverage, newPos.markPrice);
        _removePositionFromMarket(newPos.marketIdx, positionSizeAssetRaw, newPos.markPrice, newPos.positionType);

        uint128 positionSizeAsset = calculatePositionAssetSize(newPos.initialCollateral - newPos.openFee, newPos.leverage, newPos.openPrice);
        _addPositionToMarket(newPos.marketIdx, positionSizeAsset, newPos.markPrice, newPos.positionType);
        ILimitBotVault(limitBotVault).onMoneyFree{value: 0.01 ever, flag: 1, bounce: false}(Gas.OPEN_LIMIT_ORDER_RESERVE);

        emit LimitOrderExecution(
            meta.callId,
            user,
            newPos,
            positionKey
        );
    }
    //endregion

    //region cancel order
    // ----------------------------------------------------------------------------------
    // --------------------------- ORDER CANCEL HANDLERS --------------------------------
    // ----------------------------------------------------------------------------------
    function cancelLimitOrder(
        address user,
        uint32 positionKey,
        Callback.CallMeta meta
    ) external view onlyActive reserve {
        require (msg.value >= Gas.MIN_MSG_VALUE, Errors.LOW_MSG_VALUE);

        address gravixAcc = getGravixAccountAddress(user);

        IGravixAccount(gravixAcc).process_cancelLimitOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            positionKey,
            meta,
            gravixAccountCode.version
        );
    }

    function revert_cancelLimitOrder(
        address user, uint32 positionKey, Callback.CallMeta meta
    ) external override onlyGravixAccount(user) reserveAndFailCallback(meta) {
        emit CancelLimitOrderRevert(meta.callId, user, positionKey);
    }

    function finish_cancelLimitOrder(
        address user,
        uint32 positionKey,
        uint128 collateral,
        bool positionHasTriggers,
        Callback.CallMeta meta
    ) external override onlyGravixAccount(user) reserve {
        collateralReserve -= collateral;

        emit CancelLimitOrder(meta.callId, user, positionKey);
        uint128 unusedTriggerValue = positionHasTriggers ? Gas.TRIGGER_ORDER_VALUE - 0.06 ever : 0;
        uint128 totalUnusedValue = Gas.OPEN_LIMIT_ORDER_RESERVE - 0.06 ever + unusedTriggerValue;

        ILimitBotVault(limitBotVault).sendTo{
            value: 0.01 ever,
            flag: 0
        }(
            user,
            totalUnusedValue
        );

        _transfer(
            usdt.wallet,
            collateral,
            user,
            _makeCell(meta.nonce),
            meta.sendGasTo,
            MsgFlag.ALL_NOT_RESERVED
        );
    }

    //endregion
}
