pragma ever-solidity ^0.62.0;


import "../../interfaces/IGravixAccount.tsol";
import "../../libraries/Callback.tsol";
import "./GravixVaultLiquidityPool.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


abstract contract GravixVaultMarkets is GravixVaultLiquidityPool {
    function marketOpen(uint32 marketIdx) public view returns (bool open) {
        Market _market = markets[marketIdx];

        if (_market.paused) return false;
        if (!_market.scheduleEnabled) return true;

        (
            uint year, uint month, uint day,,,
        ) = DateTimeLib.timestampToDateTime(now);
        uint curWeekDay = DateTimeLib.getDayOfWeek(now);

        // first check if market is shut down because of weekend
        // weekend intervals are sorted by beginning and cant intersect
        // so that its enough to check 1st interval with lower start
        optional(uint32, DateTimeInterval) opt = weekends[marketIdx].prevOrEq(now);
        if (opt.hasValue()) {
            (,DateTimeInterval lastWeekend) = opt.get();
            if (now <= _dateTimeToTimestamp(lastWeekend.to)) return false;
        }

        // now lets check if we are on working hours of market
        mapping (uint8 => TimeInterval[]) _marketWorkingHours = workingHours[marketIdx];

        if (!_marketWorkingHours.exists(uint8(curWeekDay))) return false;
        // ok, so, we are on working day, lets get timestamp of start/end of the working day
        TimeInterval[] workIntervals = _marketWorkingHours[uint8(curWeekDay)];
        for (TimeInterval interval: workIntervals) {
            uint32 fromTs = _dateTimeToTimestamp(_timeToDateTime(year, month, day, interval.from));
            uint32 toTs = _dateTimeToTimestamp(_timeToDateTime(year, month, day, interval.to));
            // end not set => work till the end of the day, set infinite timestamp to bypass check
            if (interval.to.hour == 0 && interval.to.minute == 0) toTs = 2**32 - 1;
            if (now >= fromTs && now <= toTs) return true;
        }
        return false;
    }

    function addMarkets(
        MarketConfig[] newMarkets,
        Callback.CallMeta meta
    ) external onlyOwner reserveAndSuccessCallback(meta) {
        for (MarketConfig _marketConfig : newMarkets) {
            require (validateMarketConfig(_marketConfig), Errors.BAD_INPUT);

            Market newMarket;
            newMarket.priceSource = _marketConfig.priceSource;
            newMarket.maxTotalLongsUSD = _marketConfig.maxLongsUSD;
            newMarket.maxTotalShortsUSD = _marketConfig.maxShortsUSD;
            newMarket.noiWeight = _marketConfig.noiWeight;
            newMarket.maxLeverage = _marketConfig.maxLeverage;
            newMarket.depthAsset = _marketConfig.depthAsset;
            newMarket.fees = _marketConfig.fees;
            newMarket.scheduleEnabled = _marketConfig.scheduleEnabled;

            workingHours[marketCount] = _marketConfig.workingHours;
            markets[marketCount] = newMarket;
            marketCount += 1;

            emit NewMarket(meta.callId, _marketConfig);
        }
    }

    function setMarketsConfigs(
        mapping (uint32 => MarketConfig) newConfigs, Callback.CallMeta meta
    ) external onlyOwner reserveAndSuccessCallback(meta) {
        for ((uint32 marketIdx, MarketConfig config) : newConfigs) {
            require (markets.exists(marketIdx), Errors.BAD_INPUT);
            require (validateMarketConfig(config), Errors.BAD_INPUT);

            Market market = markets[marketIdx];
            market.priceSource = config.priceSource;
            market.maxTotalLongsUSD = config.maxLongsUSD;
            market.maxTotalShortsUSD = config.maxShortsUSD;
            market.noiWeight = config.noiWeight;
            market.maxLeverage = config.maxLeverage;
            market.depthAsset = config.depthAsset;
            market.fees = config.fees;
            market.scheduleEnabled = config.scheduleEnabled;

            workingHours[marketIdx] = config.workingHours;
            markets[marketIdx] = market;

            emit MarketConfigUpdate(meta.callId, marketIdx, config);
        }
    }

    function setOracleConfigs(
        mapping (uint32 => OracleConfig) newOracles, Callback.CallMeta meta
    ) external onlyManager reserveAndSuccessCallback(meta) {
        for ((uint32 marketIdx, OracleConfig oracleConf) : newOracles) {
            require (markets.exists(marketIdx), Errors.BAD_INPUT);

            oracleConfigs[marketIdx] = oracleConf;
            emit MarketOracleConfigUpdate(meta.callId, marketIdx, oracleConf);
        }
    }

    function validateMarketConfig(MarketConfig config) public pure returns (bool correct) {
        correct = true && config.maxLeverage >= Constants.LEVERAGE_BASE;
        correct = correct && config.fees.fundingBaseRatePerHour < Constants.HUNDRED_PERCENT;
        correct = correct && config.fees.borrowBaseRatePerHour < Constants.HUNDRED_PERCENT;
        correct = correct && config.fees.baseSpreadRate < Constants.HUNDRED_PERCENT;
        correct = correct && config.fees.baseDynamicSpreadRate < Constants.HUNDRED_PERCENT;
        correct = correct && config.fees.closeFeeRate < Constants.HUNDRED_PERCENT;
        correct = correct && config.fees.openFeeRate < Constants.HUNDRED_PERCENT;

        for ((uint8 key, TimeInterval[] intervals) : config.workingHours) {
            correct = correct && key >= DateTimeLib.DOW_MON && key <= DateTimeLib.DOW_SUN;
            for (TimeInterval interval : intervals) {
                correct = correct && validateTimeInterval(interval);
            }
        }
    }

    function setMarketsPause(
        mapping (uint32 => bool) pause, Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        for ((uint32 marketIdx, bool newState) : pause) {
            require (markets.exists(marketIdx), Errors.BAD_INPUT);

            markets[marketIdx].paused = newState;
            emit MarketPause(meta.callId, marketIdx, newState);
        }
    }

    function setMarketsWorkingHours(
        mapping (uint32 => mapping (uint8 => TimeInterval[])) marketToWorkingHours,
        Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        for ((uint32 marketIdx, mapping (uint8 => TimeInterval[]) workingHours) : marketToWorkingHours) {
            _setMarketWorkingHours(marketIdx, workingHours, meta);
        }
    }

    function setMarketsCommonWorkingHours(
        uint32[] marketIdx,
        mapping (uint8 => TimeInterval[]) workingHours,
        Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        for (uint i = 0; i < marketIdx.length; i++) {
            _setMarketWorkingHours(marketIdx[i], workingHours, meta);
        }
    }

    function _setMarketWorkingHours(
        uint32 marketIdx,
        mapping (uint8 => TimeInterval[]) _workingHours,
        Callback.CallMeta meta
    ) internal {
        require (markets.exists(marketIdx), Errors.BAD_INPUT);

        for ((uint8 key, TimeInterval[] intervals) : _workingHours) {
            require (key >= DateTimeLib.DOW_MON && key <= DateTimeLib.DOW_SUN, Errors.BAD_INPUT);
            for (TimeInterval interval : intervals) {
                require (validateTimeInterval(interval), Errors.BAD_INPUT);
            }
        }

        workingHours[marketIdx] = _workingHours;
        emit MarketScheduleUpdate(meta.callId, marketIdx, _workingHours);
    }

    function addMarketsWeekends(
        uint32[] marketIdx,
        DateTimeInterval[] newWeekends,
        Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        require (marketIdx.length == newWeekends.length, Errors.BAD_INPUT);

        for (uint i = 0; i < marketIdx.length; i++) {
            _addMarketWeekends(marketIdx[i], newWeekends[i], meta);
        }
    }

    function addMarketsCommonWeekends(
        uint32[] marketIdx,
        DateTimeInterval newWeekends,
        Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        for (uint i = 0; i < marketIdx.length; i++) {
            _addMarketWeekends(marketIdx[i], newWeekends, meta);
        }
    }

    function _addMarketWeekends(
        uint32 marketIdx,
        DateTimeInterval _newWeekend,
        Callback.CallMeta meta
    ) internal {
        require (markets.exists(marketIdx), Errors.BAD_INPUT);
        require (validateDateTimeInterval(_newWeekend));

        uint32 _newWeekendStart = _dateTimeToTimestamp(_newWeekend.from);
        uint32 _newWeekendEnd = _dateTimeToTimestamp(_newWeekend.to);

        // check that previous weekend end before start of this weekend
        optional(uint32, DateTimeInterval) _opt = weekends[marketIdx].prevOrEq(_newWeekendStart);
        if (_opt.hasValue()) {
            (, DateTimeInterval _prevWeekend) = _opt.get();
            uint32 _prevWeekendEnd = _dateTimeToTimestamp(_prevWeekend.to);

            require (_newWeekendStart >= _prevWeekendEnd, Errors.BAD_INPUT);
        }

        // check that next weekend start after this weekend
        optional(uint32, DateTimeInterval) _opt2 = weekends[marketIdx].next(_newWeekendStart);
        if (_opt2.hasValue()) {
            (uint32 _nextWeekendStart,) = _opt2.get();

            require (_nextWeekendStart >= _newWeekendEnd, Errors.BAD_INPUT);
        }

        weekends[marketIdx][_newWeekendStart] = _newWeekend;
        emit MarketWeekends(meta.callId, marketIdx, _newWeekend);
    }

    function clearMarketsWeekends(
        uint32[] marketIdx, Callback.CallMeta meta
    ) external onlyMarketManager reserveAndSuccessCallback(meta) {
        for (uint i = 0; i < marketIdx.length; i++) {
            delete weekends[marketIdx[i]];
            emit MarketWeekendsCleared(meta.callId, marketIdx[i]);
        }
    }

    function validateTimeInterval(TimeInterval val) public pure returns (bool correct) {
        return val.to.hour > val.from.hour ||
            (val.to.hour == val.from.hour && val.to.minute > val.from.minute) ||
            (val.to.hour == 0 && val.to.minute == 0);
    }

    function validateDateTimeInterval(DateTimeInterval val) public pure returns (bool correct) {
        return _dateTimeToTimestamp(val.to) > _dateTimeToTimestamp(val.from);
    }

    function getMarketWorkingHours(uint32 marketIdx) external view responsible returns (mapping (uint8 => TimeInterval[])) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }workingHours[marketIdx];
    }

    function getMarketWeekends(uint32 marketIdx) external view responsible returns (mapping (uint32 => DateTimeInterval)) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }weekends[marketIdx];
    }

    function getMarket(uint32 marketIdx) external view responsible returns (Market _market) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } markets[marketIdx];
    }

    function getMarkets() external view responsible returns (mapping (uint32 => Market) _markets) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } markets;
    }

    function getOracleConfigs() external view responsible returns (mapping (uint32 => OracleConfig) _oracle_configs) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } oracleConfigs;
    }

    function getOracleConfig(uint32 marketIdx) external view responsible returns (OracleConfig _oracle) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } oracleConfigs[marketIdx];
    }
}
