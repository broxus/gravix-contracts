pragma ever-solidity ^0.62.0;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "../../libraries/Gas.tsol";
import "../../libraries/Callback.tsol";
import "../../interfaces/IGravixAccount.tsol";
import "./GravixVaultOrders.tsol";
import "locklift/src/console.tsol";
import {DateTime as DateTimeLib} from "../../libraries/DateTime.tsol";


abstract contract GravixVaultBase is GravixVaultOrders {
    function transferOwnership(address newOwner, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        managers.owner = newOwner;
        emit NewOwner(meta.callId, newOwner);
    }

    function setMarketManager(address newManager, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        managers.marketManager = newManager;
        emit NewMarketManager(meta.callId, newManager);
    }

    function setManager(address newManager, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        managers.manager = newManager;
        emit NewManager(meta.callId, newManager);
    }


    function setPriceNode(address newNode, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        priceNode = newNode;
        emit NewPriceNode(meta.callId, newNode);
    }

    function setPricePubkey(uint256 newPubkey, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        pricePubkey = newPubkey;
        emit NewPricePubkey(meta.callId, newPubkey);
    }

    function setPause(bool newState, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        paused = newState;
        emit Pause(meta.callId, newState);
    }

    function setLiquidationThresholdRate(uint64 newRate, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        require (newRate < Constants.HUNDRED_PERCENT, Errors.BAD_INPUT);

        liquidationParams.thresholdRate = newRate;
        emit LiquidationThresholdRateUpdate(meta.callId, newRate);
    }

    function setLiquidatorRewardShare(uint64 newShare, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        require (newShare < Constants.HUNDRED_PERCENT, Errors.BAD_INPUT);

        liquidationParams.rewardShare = newShare;
        emit LiquidatorRewardShareUpdate(meta.callId, newShare);
    }

    function setMaxPoolUtilRatio(uint64 newRatio, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        maxPoolUtilRatio = newRatio;
        emit MaxPoolUtilRatioUpdate(meta.callId, newRatio);
    }

    function setMaxPnlRate(uint64 newMaxRate, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        maxPnlRate = newMaxRate;
        emit MaxPnlRateUpdate(meta.callId, newMaxRate);
    }

    function setTotalNOILimit(bool newState, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        totalNOILimitEnabled = newState;
        emit TotalNOILimit(meta.callId, newState);
    }

    function setOpenCloseFeeDistributionSchema(
        uint64[2] newOpenFeeSchema, uint64[2] newCloseFeeSchema, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        require (newOpenFeeSchema[0] + newOpenFeeSchema[1] == Constants.HUNDRED_PERCENT, Errors.BAD_INPUT);
        require (newCloseFeeSchema[0] + newCloseFeeSchema[1] == Constants.HUNDRED_PERCENT, Errors.BAD_INPUT);

        openFeeDistributionSchema = newOpenFeeSchema;
        closeFeeDistributionSchema = newCloseFeeSchema;

        emit OpenCloseFeeSchemaUpdate(meta.callId, newOpenFeeSchema, newCloseFeeSchema);
    }

    function setTreasury(
        address newTreasury, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        treasuries.treasury = newTreasury;
        emit NewTreasury(meta.callId, newTreasury);
    }

    function setProjectFund(
        address newProjectFund, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        treasuries.projectFund = newProjectFund;
        emit NewProjectFund(meta.callId, newProjectFund);
    }

    function setDevFund(
        address newDevFund, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        treasuries.devFund = newDevFund;
        emit NewDevFund(meta.callId, newDevFund);
    }

    function setInsuranceFundLimit(
        uint128 newLimit, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        insuranceFund.limit = newLimit;
        emit InsuranceFundLimitUpdate(meta.callId, newLimit);
    }

    function setInsuranceFundOverflowDistributionSchema(
        uint64[3] newSchema, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        insuranceFundOverflowDistributionSchema = newSchema;
        emit InsuranceFundOverflowDistributionSchemaUpdate(meta.callId, newSchema);
    }

    function setReferralFeeSchema(
        uint64[3] newSchema, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        referralFeeSchema = newSchema;
        emit ReferralFeeSchemaUpdate(meta.callId, newSchema);
    }

    function setGrandReferralFeeSchema(
        uint64[3] newSchema, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        grandReferralFeeSchema = newSchema;
        emit GrandReferralFeeSchemaUpdate(meta.callId, newSchema);
    }

    function setMinPositionCollateral(
        uint128 newVal, Callback.CallMeta meta
    ) external onlyOwner reserveAndSendGas(meta) {
        minPositionCollateral = newVal;
        emit MinPositionCollateralUpdate(meta.callId, newVal);
    }

    function receiveTokenWalletAddress(address wallet) external override {
        if (msg.sender == usdt.root) usdt.wallet = wallet;
        if (msg.sender == stgUsdt.root) stgUsdt.wallet = wallet;
    }

    function onAcceptTokensTransfer(
        address,
        uint128 amount,
        address sender,
        address,
        address remainingGasTo,
        TvmCell payload
    ) external override reserve {
        require (msg.sender == usdt.wallet || msg.sender == stgUsdt.wallet, Errors.NOT_TOKEN_WALLET);

        (
            Action action,
            uint32 nonce,
            uint32 callId,
            TvmCell actionPayload,
            bool correct
        ) = decodeTokenTransfer(payload);
        bool exception = !correct || paused || msg.value < Gas.MIN_MSG_VALUE;
        console.log(format("action {} exception {}",uint(action), exception ? 1 : 0));
        if (msg.sender == usdt.wallet) {
            if (!exception && action == Action.MarketOrder) {
                exception = exception || !_handleMarketOrder(
                    sender,
                    amount,
                    actionPayload,
                    Callback.CallMeta(callId, nonce, remainingGasTo)
                );
            } if (!exception && action == Action.LimitOrder) {
               exception = exception || !_handleLimitOrder(
                    sender,
                    amount,
                    actionPayload,
                    Callback.CallMeta(callId, nonce, remainingGasTo)
                );
            } else if (!exception && action == Action.LiquidityDeposit) {
                _handleUsdtDeposit(sender, amount, Callback.CallMeta(callId, nonce, remainingGasTo));
            } else if (!exception && action == Action.InsuranceDeposit) {
                _handleInsuranceDeposit(sender, amount, Callback.CallMeta(callId, nonce, remainingGasTo));
            } else if (!exception && action == Action.AddCollateral) {
                _handleAddCollateral(sender, amount, actionPayload, Callback.CallMeta(callId, nonce, remainingGasTo));
            } else {
                // bad action for USDT
                exception = true;
            }
        } else if (msg.sender == stgUsdt.wallet) {
            if (!exception && action == Action.LiquidityWithdraw) {
                _handleStgUsdtDeposit(sender, amount, Callback.CallMeta(callId, nonce, remainingGasTo));
            } else {
                // bad action for stgUSDT
                exception = true;
            }
        }

        if (exception) {
            emit ActionRevert(callId, sender);
            // if payload assembled correctly, send nonce, otherwise send payload we got with this transfer
            payload = correct ? _makeCell(nonce) : payload;
            _transfer(msg.sender, amount, sender, payload, remainingGasTo, MsgFlag.ALL_NOT_RESERVED);
        }
    }

    function onAcceptTokensBurn(
        uint128 amount,
        address,
        address wallet,
        address,
        TvmCell payload
    ) external override reserve {
        require (wallet == stgUsdt.wallet, Errors.NOT_TOKEN_WALLET);
        require (msg.sender == stgUsdt.root, Errors.NOT_TOKEN_ROOT);

        _handleStgUsdtBurn(amount, payload);
    }

    onBounce(TvmSlice slice) external view {
        tvm.accept();

        uint32 functionId = slice.decode(uint32);

        // if processing failed - contract was not deployed. Deploy and try again
        if (functionId == tvm.functionId(IGravixAccount.process_requestMarketOrder)) {
            tvm.rawReserve(_reserve(), 0);
            uint32 _requestNonce = slice.decode(uint32);
            PendingMarketOrder request = pendingMarketRequests[_requestNonce];

            address gravixAcc = _deployGravixAccount(request.user, request.referrer);
            IGravixAccount(gravixAcc).process_requestMarketOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                _requestNonce,
                request,
                gravixAccountCode.version
            );
        }
        if (functionId == tvm.functionId(IGravixAccount.process_requestLimitOrder)) {
            tvm.rawReserve(_reserve(), 0);
            uint32 _requestNonce = slice.decode(uint32);
            PendingLimitOrder request = pendingLimitRequests[_requestNonce];

            address gravixAcc = _deployGravixAccount(request.user, request.referrer);
            IGravixAccount(gravixAcc).process_requestLimitOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                _requestNonce,
                request,
                gravixAccountCode.version
            );
        }
    }
}
