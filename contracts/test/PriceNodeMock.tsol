pragma ever-solidity >= 0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import {IPriceNode} from "../interfaces/IPriceNode.tsol";
import {Errors} from "../libraries/Errors.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import {IOnPriceCallback} from "../interfaces/IOnPriceCallback.tsol";
import {Gas} from "../libraries/Gas.tsol";


contract PriceNodeMock is IPriceNode {

    event RequestResolved(address sender, uint32 nonce, string ticker);

    uint32 static deployNonce;
    address owner;

    uint256 daemonPubkey;
    uint256 oraclePubkey;
    uint32 requestNonce;
    uint16 maxRequests = 1000;
    uint16 requestsNum;

    uint16 maxActionsPerTx = 20;
    uint128 constant MIN_REQ_VALUE = 0.12 ever;

    mapping (string => TickerConfig) tickerConfigs; // ticker hash as a key
    mapping (string => mapping (uint32 => Request)) requests;
    Price[] prices;
    constructor(address _owner, uint256 _oraclePubkey, uint256 _daemonPubkey) public {
        tvm.accept();

        owner = _owner;
        oraclePubkey = _oraclePubkey;
        daemonPubkey = _daemonPubkey;
    }

    function getTickerConfigs() external view responsible returns (TickerConfig[] _configs) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } tickerConfigs.values();
    }

    function getTickerRequests(string ticker) external view responsible returns (Request[] _requests) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } requests[ticker].values();
    }

    function makeRequest(string ticker, address sendGasTo) external override {
        require (msg.value >= MIN_REQ_VALUE, Errors.LOW_MSG_VALUE);
        require (requests[ticker].keys().length < maxRequests, Errors.MAX_REQUESTS);

        // just take 0.05 ever to cover this call fees
        requests[ticker][requestNonce] = Request(msg.sender, msg.value - Gas.PRICE_NODE_MAKE_REQUEST_FEE);
        requestsNum += 1;
        requestNonce += 1;

        this.resolveRequests(prices);
    }


    function setPrices(Price[] _prices) external {
        tvm.accept();
        prices = _prices;
    }
    function getPrices() external view returns (Price[] _prices) {
        return prices;
    }
    function checkSign(
        uint128 p, uint32 t1, uint32 t2, string tick, TvmCell signature
    ) public view returns (bool) {
        TvmCell data = abi.encode(p, t1, t2, tick);
        return tvm.checkSign(tvm.hash(data), signature.toSlice(), oraclePubkey);
    }
    function validatePrice(Price price) public view {
        tickerConfigs[price.ticker];
        checkSign(price.price, price.serverTime, price.oracleTime, price.ticker, price.signature);
    }

    function resolveRequests(Price[] _prices) external {
        require (msg.pubkey() == daemonPubkey || msg.sender == address(this), Errors.NOT_OWNER);
        require (requestsNum > 0, Errors.NO_REQUESTS);
        tvm.accept();

        uint32 requestsResolved = 0;
        for (Price price: _prices) {
            validatePrice(price);

            mapping (uint32 => Request) reqsMap = requests[price.ticker];
            for ((uint32 nonce, Request req) : reqsMap) {
                requestsResolved += 1;
                requestsNum -= 1;
                delete reqsMap[nonce];
                IOnPriceCallback(req.sender).onPriceCallback{
                    value: req.callbackValue - Gas.PRICE_NODE_CALLBACK_FEE
                }(price.price, price.ticker);
                emit RequestResolved(req.sender, nonce, price.ticker);

                if (requestsResolved >= maxActionsPerTx) {
                    break;
                }
            }

            requests[price.ticker] = reqsMap;
            if (requestsResolved >= maxActionsPerTx) {
                this.resolveRequests{value: 0.1 ever}(_prices);
                return;
            }
        }
    }
}
