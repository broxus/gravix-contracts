pragma ever-solidity ^0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;


import '@broxus/contracts/contracts/wallets/Account.tsol';
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";



contract TestWallet is Account {
    // deployable by both internal and external msgs
    constructor(uint256 ownerPubkey) public {
        tvm.accept();

        setOwnership(ownerPubkey);
    }

    // can accept tokens
    function onAcceptTokensTransfer(
        address,
        uint128,
        address,
        address,
        address remainingGasTo,
        TvmCell
    ) external pure {
        tvm.rawReserve(address(this).balance - msg.value, 0);

        remainingGasTo.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
    }

    // batch version of sendTransaction
    function sendTransactions(
        address[] dest,
        uint128[] value,
        bool[] bounce,
        uint8[] flags,
        TvmCell[] payload
    )
        public
        pure
    {
        tvm.accept();
        this._sendTransactions(dest, value, bounce, flags, payload, 0);
    }

    function _sendTransactions(
        address[] dest,
        uint128[] value,
        bool[] bounce,
        uint8[] flags,
        TvmCell[] payload,
        uint256 _idx
    )
        public
        pure
    {
        tvm.accept();

        uint256 batchLimit = 50;
        for (uint i = _idx; i < dest.length; i++) {
            if (i >= _idx + batchLimit) {
                break;
            }
            dest[i].transfer(value[i], bounce[i], flags[i], payload[i]);
        }
        if (_idx + batchLimit < dest.length) {
            _idx += batchLimit;
            this._sendTransactions(dest, value, bounce, flags, payload, _idx);
        }

    }
}
