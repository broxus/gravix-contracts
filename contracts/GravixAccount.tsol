pragma ever-solidity ^0.62.0;

//───────────────────────────────────────────────────────────────────────────────────────────────
//─██████████████─████████████████───██████████████─██████──██████─██████████─████████──████████─
//─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░██─██░░░░██──██░░░░██─
//─██░░██████████─██░░████████░░██───██░░██████░░██─██░░██──██░░██─████░░████─████░░██──██░░████─
//─██░░██─────────██░░██────██░░██───██░░██──██░░██─██░░██──██░░██───██░░██─────██░░░░██░░░░██───
//─██░░██─────────██░░████████░░██───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██████─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██───██░░██───────██░░░░░░██─────
//─██░░██──██░░██─██░░██████░░████───██░░██████░░██─██░░██──██░░██───██░░██─────████░░░░░░████───
//─██░░██──██░░██─██░░██──██░░██─────██░░██──██░░██─██░░░░██░░░░██───██░░██─────██░░░░██░░░░██───
//─██░░██████░░██─██░░██──██░░██████─██░░██──██░░██─████░░░░░░████─████░░████─████░░██──██░░████─
//─██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░██──██░░██───████░░████───██░░░░░░██─██░░░░██──██░░░░██─
//─██████████████─██████──██████████─██████──██████─────██████─────██████████─████████──████████─
//───────────────────────────────────────────────────────────────────────────────────────────────

import {GravixAccountBase} from "./base/gravix_account/GravixAccountBase.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import {Callback} from "./libraries/Callback.tsol";
import {IGravixVault} from "./interfaces/IGravixVault.tsol";
import {IGravixAccount} from "./interfaces/IGravixAccount.tsol";
import {IOldGravixAccount} from "./interfaces/IOldGravixAccount.tsol";

contract GravixAccount is GravixAccountBase {
    // Cant be deployed directly
    constructor() public { revert(); }

    function onDeployRetry(TvmCell, TvmCell, address sendGasTo) external view onlyGravixVault functionID(0x23dc4360){
        tvm.rawReserve(_reserve(), 0);
        sendGasTo.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function upgrade(TvmCell newCode, uint32 newVersion, Callback.CallMeta meta) external override onlyGravixVault {
        if (newVersion == currentVersion) {
            tvm.rawReserve(_reserve(), 0);
            meta.sendGasTo.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
            return;
        }

        uint8 _tmp;
        TvmBuilder mainBuilder;
        mainBuilder.store(vault); // address 267
        mainBuilder.store(_tmp); // 8
        mainBuilder.store(meta.sendGasTo); // address 267

        mainBuilder.storeRef(platformCode); // ref

        TvmBuilder initial;
        initial.store(user);

        mainBuilder.storeRef(initial); // ref 2

        TvmBuilder params;
        params.store(newVersion);
        params.store(currentVersion);
        params.store(referrer);

        mainBuilder.storeRef(params); // ref3

        TvmCell storageData = abi.encode(
            referrerChecked, //bool
            grandReferrer, //address
            grandReferrerChecked, //bool
            referralBalance, //uint128
            marketOrders, //mapping(uint32 => MarketOrder),
            limitOrders, //mapping(uint32 => LimitOrder),
            positions, //mapping(uint32 => Position),
            requestCounter, //uint32
            lastUsedTimeStamp //uint32
        );
        TvmCell data = abi.encode(meta.callId, meta.nonce, storageData);

        mainBuilder.storeRef(data); // ref3

        tvm.setcode(newCode);
        // run onCodeUpgrade from new code
        tvm.setCurrentCode(newCode);
        onCodeUpgrade(mainBuilder.toCell());
    }

    function onCodeUpgrade(TvmCell upgradeData) private {
        tvm.rawReserve(_reserve(), 0);

        TvmSlice s = upgradeData.toSlice();
        (address root_, , address sendGasTo) = s.decode(address, uint8, address);
        address _vault = root_;

        TvmCell _platformCode = s.loadRef();

        TvmSlice initialData = s.loadRefAsSlice();
        address _user = initialData.decode(address);

        TvmSlice params = s.loadRefAsSlice();
        uint32 _oldVersion;
        uint32 _currentVersion;
        (_currentVersion, _oldVersion) = params.decode(uint32, uint32);

        if (_currentVersion == _oldVersion) {
            // deploy
            tvm.resetStorage();
            referrer = params.decode(address);

            vault = _vault;
            platformCode = _platformCode;
            user = _user;
            currentVersion = _currentVersion;
            lastUsedTimeStamp = now;

            referrer = referrer == user ? address.makeAddrStd(0, 0) : referrer;

            IGravixVault(vault).onGravixAccountDeploy{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                user, Callback.CallMeta(0, 0, sendGasTo)
            );
        // 3 for ever, 1 for venom, big limit update
        } else if (_oldVersion == 3 || _oldVersion == 1) {
            // storage was modified
            tvm.resetStorage();
            referrer = params.decode(address);
            // upgrade without modifying storage
            currentVersion = _currentVersion;
            vault = _vault;
            platformCode = _platformCode;
            user = _user;

            TvmCell data = s.loadRef();
            (uint32 callId, uint32 nonce, TvmCell storageData) = abi.decode(data, (uint32, uint32, TvmCell));
            (
                mapping(uint32 => IOldGravixAccount.MarketOrder) oldMarketOrders,
                mapping (uint32 => IOldGravixAccount.Position) oldPositions,
                uint32 oldRequestCounter,
                address oldGrandReferrer,
                uint128 oldReferralBalance
            ) = abi.decode(
                storageData,
                (
                    mapping(uint32 => IOldGravixAccount.MarketOrder), // marketOrders
                    mapping (uint32 => IOldGravixAccount.Position), // positions
                    uint32,
                    address,
                    uint128
                )
            );
            // region map old orders
            for ((uint32 orderNonce, IOldGravixAccount.MarketOrder order) : oldMarketOrders) {
                marketOrders[orderNonce] = MarketOrder({
                    marketIdx: order.marketIdx,
                    positionType: order.positionType,
                    collateral: order.collateral,
                    expectedPrice: order.expectedPrice,
                    leverage: order.leverage,
                    maxSlippageRate: order.maxSlippageRate,
                    openFeeRate: order.openFeeRate,
                    closeFeeRate: order.closeFeeRate,
                    baseSpreadRate: order.baseSpreadRate,
                    liquidationThresholdRate: order.liquidationThresholdRate,
                    borrowBaseRatePerHour: order.borrowBaseRatePerHour,
                    stopLossTriggerPrice: 0,
                    takeProfitTriggerPrice: 0,
                    createdAt: now
                });
            }
            // endregion

            // region map old positions
            for ((uint32 positionNonce, IOldGravixAccount.Position position): oldPositions) {
                positions[positionNonce] = Position({
                    marketIdx: position.marketIdx,
                    positionType: position.positionType,
                    initialCollateral: position.initialCollateral,
                    openFee: position.openFee,
                    openPrice: position.openPrice,
                    markPrice: position.markPrice,
                    leverage: position.leverage,
                    accUSDFundingPerShare: position.accUSDFundingPerShare,
                    borrowBaseRatePerHour: position.borrowBaseRatePerHour,
                    baseSpreadRate: position.baseSpreadRate,
                    closeFeeRate: position.closeFeeRate,
                    liquidationThresholdRate: position.liquidationThresholdRate,
                    createdAt: position.createdAt,
                    stopLoss: null,
                    takeProfit: null
                });
            }
            // endregion

            // region simple fields
            requestCounter = oldRequestCounter;
            grandReferrer = oldGrandReferrer;
            referralBalance = oldReferralBalance;
            lastUsedTimeStamp = now;
            // endregion

            //region logic
            if (referrer != address(0)) {
                referrerChecked = true;
            }
            if (grandReferrer != address(0)) {
                grandReferrerChecked = true;
            }
            // endregion
            IGravixVault(vault).onGravixAccountUpgrade{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                user, _oldVersion, _currentVersion, Callback.CallMeta(callId, nonce, sendGasTo)
            );
        } else {
            TvmCell data = s.loadRef();
            currentVersion = _currentVersion;
            (uint32 callId, uint32 nonce,) = abi.decode(data, (uint32, uint32, TvmCell));

            lastUsedTimeStamp = now;
            IGravixVault(vault).onGravixAccountUpgrade{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                user, _oldVersion, _currentVersion, Callback.CallMeta(callId, nonce, sendGasTo)
            );
        }
    }
}
