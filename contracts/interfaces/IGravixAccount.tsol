pragma ever-solidity ^0.62.0;


import "../libraries/Callback.tsol";
import "./IGravixVault.tsol";
import "./IPriceNode.tsol";



interface IGravixAccount {

    struct MarketOrder {
        uint32 marketIdx;
        IGravixVault.PositionType positionType;
        uint128 collateral; // 6 decimals number
        uint128 expectedPrice; // 8 decimals number
        uint32 leverage; // 6 decimals number
        uint64 maxSlippageRate; // %
        uint64 openFeeRate; // %
        uint64 closeFeeRate; // %
        uint64 baseSpreadRate; // %
        uint64 liquidationThresholdRate; // %
        uint64 borrowBaseRatePerHour; // %
        optional(IGravixVault.StopOrder) stopLoss;
        optional(IGravixVault.StopOrder) takeProfit;
    }

    struct LimitOrder {
        uint32 marketIdx;
        IGravixVault.PositionType positionType;
        IGravixVault.LimitOrderType limitOrderType;
        uint128 collateral; // 6 decimals number
        uint128 triggerPrice; // 8 decimals number
        uint32 leverage; // 6 decimals number
        uint64 openFeeRate; // %
        uint64 closeFeeRate; // %
        uint64 baseSpreadRate; // %
        uint64 liquidationThresholdRate; // %
        uint64 borrowBaseRatePerHour; // %
        uint128 stopLossTriggerPrice;
        uint128 takeProfitTriggerPrice;
    }

    struct Position {
        uint32 marketIdx;
        IGravixVault.PositionType positionType;
        uint128 initialCollateral; // 6 decimals number
        uint128 openFee; // amount of usdt taken when position was opened
        uint128 openPrice; // 8 decimals number
        uint128 markPrice; // 8 decimals number
        uint32 leverage;
        int256 accUSDFundingPerShare;
        uint64 borrowBaseRatePerHour; // % per hour
        uint64 baseSpreadRate; // %
        uint64 closeFeeRate; // %
        uint64 liquidationThresholdRate; // %
        uint32 createdAt; // %
        optional(IGravixVault.StopOrder) stopLoss;
        optional(IGravixVault.StopOrder) takeProfit;
    }

    struct PositionView {
        Position position;
        uint128 positionSizeUSD; // 6 decimals number
        uint128 closePrice; // 8 decimals number
        uint128 borrowFee; // 6 decimals number
        int256 fundingFee; // 6 decimals number
        uint128 closeFee; // 6 decimals number
        uint128 liquidationPrice; // 8 decimals number
        int256 pnl; // 6 decimals number
        bool liquidate;
        uint32 viewTime;
    }

    struct ViewInput {
        uint32 positionKey;
        uint128 assetPrice; // 8 decimals number
        IGravixVault.Funding funding;
    }
    struct ViewInputInternal {
        uint128 assetPrice; // 8 decimals number
        IGravixVault.Funding funding;
    }

    function process_requestMarketOrder(
        uint32 reqNonce,
        IGravixVault.PendingMarketOrder pendingRequest,
        uint32 accountVersion
    ) external;
    function process_cancelMarketOrder(
        uint32 positionKey,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;

    function process_executeMarketOrder(
        uint32 _positionKey,
        uint32 _marketIdx,
        uint128 _positionSizeAsset,
        IGravixVault.PositionType _positionType,
        uint128 _assetPrice,
        uint64 _dynamicSpread,
        int256 _accUSDFundingPerShare,
        uint64 _maxPnlRate,
        uint64 _minStopLossRate,
        Callback.CallMeta _meta,
        uint32 _accountVersion
    ) external;

    function process_requestLimitOrder(
        uint32 reqNonce,
        IGravixVault.PendingLimitOrder _pendingRequest,
        int256 _accUSDFundingPerShare,
        uint64 _maxPnlRate,
        uint64 _minStopLossRate,
        uint32 _accountVersion
    ) external;

    function process_executeLimitOrder(
        uint32 _positionKey,
        uint32 _marketIdx,
        uint128 collateral,
        uint32 leverage,
        uint128 _positionSizeAsset,
        IGravixVault.PositionType _positionType,
        uint128 _assetPrice,
        int256 _accUSDFundingPerShare,
        Callback.CallMeta _meta,
        uint32 _accountVersion
    ) external;

    function process_cancelLimitOrder(
        uint32 _positionKey,
        Callback.CallMeta _meta,
        uint32 _accountVersion
    ) external;
    function process_closePosition(
        uint32 positionKey,
        uint32 marketIdx,
        uint128 assetPrice,
        IGravixVault.Funding funding,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;
    function process_updatePosition(
        uint32 positionKey,
        uint32 marketIdx,
        uint128 assetPrice,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice,
        uint64 _maxPnlRate,
        uint64 _minStopLossRate,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;
    function process_removePositionTriggerPrice(
        uint32 positionKey,
        uint32 marketIdx,
        bool removeStopLoss,
        bool removeTakeProfit,
        Callback.CallMeta,
        uint32 accountVersion
    ) external;
    function process_triggerPositions(
        uint32 _positionKey,
        uint32 _marketIdx,
        uint128 _assetPrice,
        IGravixVault.TriggerPositionType _stopOrderType,
        IGravixVault.Funding _funding,
        address initiator,
        Callback.CallMeta _meta,
        uint32 _accountVersion
    ) external;
    function process_liquidatePositions(
        address liquidator,
        uint32 positionKey,
        uint32 marketIdx,
        uint128 assetPrice,
        IGravixVault.Funding funding,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;
    function process_addCollateral(
        uint128 amount,
        uint32 marketIdx,
        uint32 positionKey,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;
    function process_removeCollateral(
        uint128 amount,
        uint32 positionKey,
        uint32 marketIdx,
        uint32 maxLeverage,
        uint128 minCollateral,
        Callback.CallMeta meta,
        uint32 accountVersion
    ) external;
    function process_sendReferrerFee(
        uint128 amount, Callback.CallMeta meta
    ) external;
    function process_withdrawReferralBalance(Callback.CallMeta meta) external;
    function getReferrer() external view responsible returns (address user, address _referrer);

    function process_getReferrer(address _user, address _referrer) external;

    function upgrade(TvmCell newCode, uint32 newVersion, Callback.CallMeta meta) external;
}
