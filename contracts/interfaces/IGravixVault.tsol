pragma ever-solidity ^0.62.0;


import {IAcceptTokensTransferCallback} from "@broxus/tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import {IAcceptTokensBurnCallback} from "@broxus/tip3/contracts/interfaces/IAcceptTokensBurnCallback.tsol";
import {IOldGravixVault} from "./IOldGravixVault.tsol";
import {IPriceNode} from "./IPriceNode.tsol";
import {Callback} from "../libraries/Callback.tsol";
import {IGravixAccount} from "./IGravixAccount.tsol";


interface IGravixVault is IAcceptTokensTransferCallback, IAcceptTokensBurnCallback, IOldGravixVault {
    enum Action {
        MarketOrder,
        LiquidityDeposit,
        LiquidityWithdraw,
        InsuranceDeposit,
        AddCollateral,
        LimitOrder,
        RemoveCollateral
    }

    enum LimitOrderType { Limit, Stop }
    enum TriggerPositionType {StopLoss, TakeProfit }



    struct Time {
        uint8 hour;
        uint8 minute;
    }

    struct DateTime {
        uint16 year;
        uint8 month;
        uint8 day;
        uint8 hour;
        uint8 minute;
    }

    struct TimeInterval {
        Time from;
        Time to;
    }

    struct DateTimeInterval {
        DateTime from;
        DateTime to;
    }

    enum OracleType { Dex, PriceNode }
    struct Pair {
        address addr;
        address leftRoot;
        address rightRoot;
    }

    struct DexOracle {
        address targetToken;
        // 1st pair should contain target token, last pair should contain USDT
        Pair[] path;
    }

    struct PriceNode {
        string ticker;
        uint32 maxOracleDelay;
        uint32 maxServerDelay;
    }

    struct OracleConfig {
        DexOracle dex;
        PriceNode priceNode;
    }

    struct Fees {
        // fee and rates in %
        uint64 openFeeRate;
        uint64 closeFeeRate;
        uint64 baseSpreadRate;
        uint64 baseDynamicSpreadRate;
        uint64 borrowBaseRatePerHour;
        uint64 fundingBaseRatePerHour;
    }

    struct Market {
        OracleType priceSource;

        uint128 totalLongsAsset;
        uint128 totalShortsAsset;

        uint128 maxTotalLongsUSD;
        uint128 maxTotalShortsUSD;

        Funding funding;
        uint32 lastFundingUpdateTime;

        uint32 maxLeverage; // 10**6 -> 1x
        uint128 depthAsset;

        Fees fees;
        // if this is true, market works only in specified workingHours
        bool scheduleEnabled;
        bool paused;
    }

    struct PositionIdx {
        address user;
        uint32 positionKey;
    }

    struct PositionTriggerIdx {
        address user;
        uint32 positionKey;
        TriggerPositionType triggerPositionType;
    }

    struct LimitOrderIdx {
        uint32 orderKey;
        uint32 marketIdx;
        uint128 collateral;
        uint32 leverage;
        PositionType positionType;
        address user;
    }

    struct LiquidationData {
        IPriceNode.Price price;
        PositionIdx[] positions;
    }

    struct ExecuteLimitOrderData {
        IPriceNode.Price price;
        LimitOrderIdx[] orders;
    }

    struct PositionTriggerData {
        IPriceNode.Price price;
        PositionTriggerIdx[] positions;
    }

    enum PositionType { Long, Short }

    struct PendingMarketOrder {
        address user;
        uint32 marketIdx;
        PositionType positionType;
        uint128 collateral;
        uint128 expectedPrice;
        uint32 leverage;
        uint64 maxSlippageRate; // %
        uint64 openFeeRate; // %
        uint64 closeFeeRate; // %
        uint64 baseSpreadRate; // %
        uint64 liquidationThresholdRate; // %
        uint64 borrowBaseRatePerHour; // %
        IPriceNode.Price price;
        address referrer;
        uint128 stopLossTriggerPrice;
        uint128 takeProfitTriggerPrice;
        Callback.CallMeta meta;
    }

    struct PendingLimitOrder {
        address user;
        uint32 marketIdx;
        PositionType positionType;
        uint128 collateral;
        uint128 triggerPrice;
        LimitOrderType orderType;
        uint32 leverage;
        uint64 openFeeRate; // %
        uint64 closeFeeRate; // %
        uint64 baseSpreadRate; // %
        uint64 liquidationThresholdRate; // %
        uint64 borrowBaseRatePerHour; // %
        address referrer;
        uint128 assetPrice;
        uint128 stopLossTriggerPrice;
        uint128 takeProfitTriggerPrice;
        Callback.CallMeta meta;
    }

    struct MarketConfig {
        OracleType priceSource;
        uint128 maxLongsUSD;
        uint128 maxShortsUSD;
        uint32 maxLeverage;
        uint128 depthAsset;
        Fees fees;
        bool scheduleEnabled;
        mapping (uint8 => TimeInterval[]) workingHours;
    }

    struct Funding {
        int256 accLongUSDFundingPerShare;
        int256 accShortUSDFundingPerShare;
    }

    struct TokenData {
        address root;
        address wallet;
    }

    struct CodeWithVersion {
        TvmCell code;
        uint32 version;
    }

    struct Managers {
        address owner;
        address manager;
        address marketManager;
        address limitBot;
    }

    struct PoolAssets {
        uint128 balance; // liquidity deposits
        uint128 stgUsdtSupply; // amount of minted stgUsdt
        uint128 targetPrice;
    }

    struct InsuranceFund {
        uint128 balance; // collected fees, pnl and etc.
        uint128 limit;
    }

    struct LiquidationParams {
        uint64 thresholdRate;
        uint64 rewardShare;
    }

    struct Treasuries {
        address treasury;
        address projectFund;
        address devFund;
    }

    struct UpgradeStorage {
        Managers managers;
        address priceNode;
        uint256 pricePubkey;
        TokenData usdt;
        TokenData stgUsdt;
        Treasuries treasuries;
        TvmCell platformCode;
        uint32 gravixVaultVersion;
        CodeWithVersion oracleProxyCode;
        CodeWithVersion gravixAccountCode;
        PoolAssets poolAssets;
        InsuranceFund insuranceFund; // collected fees, pnl and etc.
        uint64[3] insuranceFundOverflowDistributionSchema;
        uint64[3] referralFeeSchema;
        uint64[3] grandReferralFeeSchema;
        uint128 collateralReserve; // sum of all usdt provided as a collateral for open order
        uint64 maxPoolUtilRatio;
        uint64 maxPnlRate;
        uint128 minPositionCollateral;
        bool paused;
        LiquidationParams liquidationParams;
        uint64 minStopLossRate;
        uint64[2] openFeeDistributionSchema;
        uint64[2] closeFeeDistributionSchema;
        uint32 marketCount;
        mapping (uint32 => Market) markets;
        mapping (uint32 => mapping (uint8 => TimeInterval[])) workingHours;
        mapping (uint32 => mapping (uint32 => DateTimeInterval)) weekends;
        mapping (uint32 => OracleConfig) oracleConfigs;
        uint32 requestNonce;
        mapping (uint32 => PendingMarketOrder) pendingMarketRequests;
        mapping (uint32 => PendingLimitOrder) pendingLimitRequests;
        address limitBotVault;
    }

    event NewOwner(uint32 callId, address newOwner);
    event GravixAccountCodeUpdate(uint32 callId, uint32 oldVersion, uint32 newVersion);
    event OracleProxyCodeUpdate(uint32 callId, uint32 oldVersion, uint32 newVersion);
    event GravixAccountUpgrade(uint32 callId, address user, uint32 oldVersion, uint32 newVersion);
    event GravixAccountDeploy(uint32 callId, address user);
    event ActionRevert(uint32 callId, address user);
    event MaxPoolUtilRatioUpdate(uint32 callId, uint64 newRatio);
    event MaxPnlRateUpdate(uint32 callId, uint64 newRatio);
    event InsuranceFundLimitUpdate(uint32 callId, uint128 newLimit);
    event MarketOrder(
        uint32 callId,
        address user,
        uint32 marketIdx,
        PositionType positionType,
        uint128 collateral,
        uint128 expectedPrice,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        uint32 leverage,
        uint64 maxSlippageRate,
        uint32 orderKey
    );
    event MarketOrderRequestRevert(uint32 callId, address user, uint32 revertReason);
    event MarketOrderExecutionRevert(uint32 callId, address user, uint32 orderKey, uint32 revertReason);
    event MarketOrderExecution(
        uint32 callId,
        address user,
        IGravixAccount.Position position,
        uint32 positionKey
    );
    event LimitOrderExecution(
        uint32 callId,
        address user,
        IGravixAccount.Position position,
        uint32 positionKey
    );

    event LimitOrderRequestRevert(uint32 callId, address user, uint32 revertReason);
    event LimitOrderPendingRequestRevert(uint32 callId, address user, uint32 revertReason);


    event PendingLimitOrderCreated(
        uint32 callId,
        address user,
        IGravixAccount.LimitOrder order,
        uint32 orderKey
    );

    event LimitOrder(
        uint32 callId,
        address user,
        IGravixAccount.LimitOrder order,
        uint32 orderKey
    );
    event LimitOrderExecutionRevert(uint32 callId, address user, uint32 positionKey, uint32 revertReason);
    event ReferralPayment(
        uint32 callId,
        address referrer,
        address referral,
        uint128 amount
    );
    event ReferralBalanceWithdraw(
        uint32 callId,
        address user,
        uint128 amount
    );
    event OraclePriceRequested(
        uint32 callId,
        uint32 marketIdx
    );
    event NewMarket(
        uint32 callId,
        MarketConfig market
    );
    event SetOrUpdatePositionTriggers(
        uint32 callId,
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        IGravixAccount.Position updatedPos
    );
    event RevertSetOrUpdatePositionTriggers(
        uint32 callId,
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint32 revertReason
    );
    event MarketConfigUpdate(
        uint32 callId,
        uint32 marketIdx,
        MarketConfig market
    );
    event MarketScheduleUpdate(uint32 callId, uint32 marketIdx, mapping (uint8 => TimeInterval[]));
    event MarketWeekends(uint32 callId, uint32 marketIdx, DateTimeInterval weekend);
    event MarketWeekendsCleared(uint32 callId, uint32 marketIdx);
    event MarketPause(uint32 callId, uint32 marketIdx, bool newState);
    event NewMarketManager(uint32 callId, address newManager);
    event NewManager(uint32 callId, address newManager);
    event Pause(uint32 callId, bool newState);
    event LiquidatorRewardShareUpdate(uint32 callId, uint64 newShare);
    event LiquidationThresholdRateUpdate(uint32 callId, uint64 newRate);
    event OpenCloseFeeSchemaUpdate(uint32 callId, uint64[2] newOpenFeeSchema, uint64[2] newCloseFeeSchema);
    event NewPriceNode(uint32 callId, address priceNode);
    event NewPricePubkey(uint32 callId, uint256 newPubkey);
    event NewLimitBot(uint32 callId, address limitBot);
    event NewLimitBotVault(uint32 callId, address limitBot);

    event MarketOracleConfigUpdate(uint32 callId, uint32 marketIdx, OracleConfig oracle);
    event NewTreasury(uint32 callId, address newTreasury);
    event NewProjectFund(uint32 callId, address newProjectFund);
    event NewDevFund(uint32 callId, address newDevFund);
    event InsuranceFundDeposit(uint32 callId, address user, uint128 amount);
    event InsuranceFundWithdraw(uint32 callId, uint128 treasury, uint128 projectFund, uint128 devFund);
    event InsuranceFundOverflowDistributionSchemaUpdate(uint32 callId, uint64[3] newSchema);
    event ReferralFeeSchemaUpdate(uint32 callId, uint64[3] newSchema);
    event GrandReferralFeeSchemaUpdate(uint32 callId, uint64[3] newSchema);
    event MinPositionCollateralUpdate(uint32 callId, uint128 newVal);
    event MinStopLossRateUpdate(uint32 callId, uint64 newVal);

    event CancelMarketOrderRevert(uint32 callId, address user, uint32 orderKey, uint32 revertReason);
    event CancelMarketOrder(uint32 callId, address user, uint32 orderKey);

    event CancelLimitOrderRevert(uint32 callId, address user, uint32 orderKey, uint32 revertReason);
    event CancelLimitOrder(uint32 callId, address user, uint32 orderKey);

    event ClosePositionRevert(uint32 callId, address user, uint32 positionKey, uint32 marketIdx, uint32 revertReason);
    event ClosePosition(uint32 callId, address user, uint32 positionKey, IGravixAccount.PositionView positionView);
    event AddPositionCollateral(uint32 callId, address user, uint32 positionKey, uint128 amount, IGravixAccount.Position updatedPos);
    event AddPositionCollateralRevert(uint32 callId, address user, uint32 marketIdx, uint32 positionKey, uint128 amount, uint32 revertReason);
    event RemovePositionCollateral(uint32 callId, address user, uint32 positionKey, uint128 amount, IGravixAccount.Position updatedPos);
    event RemovePositionCollateralRevert(uint32 callId, address user, uint32 positionKey, uint32 marketIdx, uint128 amount, uint32 revertReason);
    event Debt(uint32 callId, address user, uint128 debt);
    event ExecutePositionTriggerRevert(uint32 callId, address user, uint32 positionKey, uint32 marketIdx, uint32 revertReason);
    event RemovePositionTriggers(
        uint32 callId,
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        IGravixAccount.Position updatedPos
    );
    event RevertRemovePositionTriggers(uint32 callId, address user, uint32 positionKey, uint32 marketIdx, uint32 revertReason);
    event LiquidatePosition(uint32 callId, address user, address liquidator, uint32 positionKey, IGravixAccount.PositionView positionView);
    event LiquidatePositionRevert(uint32 callId, address liquidator, address user, uint32 positionKey, uint32 marketIdx, uint32 revertReason);
    event LiquidityPoolDeposit(uint32 callId, address user, uint128 usdtAmountIn, uint128 stgUsdtAmountOut);
    event LiquidityPoolWithdraw(uint32 callId, address user, uint128 usdtAmountOut, uint128 stgUsdtAmountIn);
    event LiquidityPoolFees(uint128 fees);

    function receiveTokenWalletAddress(address wallet) external;
    function onGravixAccountDeploy(address user, Callback.CallMeta meta) external view;
    function onGravixAccountUpgrade(
        address user,
        uint32 oldVersion,
        uint32 newVersion,
        Callback.CallMeta meta
    ) external view;
    function oracle_executeMarketOrder(
        uint64 nonce,
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint128 collateral,
        uint32 leverage,
        PositionType positionType,
        uint128 assetPrice,
        Callback.CallMeta meta
    ) external;

    function finish_requestMarketOrder(uint32 reqNonce, PendingMarketOrder request, uint32 orderKey) external;
    function revert_requestMarketOrder(uint32 _reqNonce, PendingMarketOrder _pendRequest, uint32 revertReason) external;
    function revert_executeMarketOrder(
        address user,
        uint32 orderKey,
        uint32 marketIdx,
        uint128 collateral,
        uint128 positionSizeAsset,
        PositionType positionType,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;
    function finish_executeMarketOrder(
        address user,
        uint32 positionKey,
        IGravixAccount.Position openedPosition,
        address referrer,
        address grandReferrer,
        Callback.CallMeta meta
    ) external;
    function revert_cancelMarketOrder(address user, uint32 orderKey, uint32 revertReason, Callback.CallMeta meta) external view;
    function finish_cancelMarketOrder(address user, uint32 orderKey, uint128 collateral, Callback.CallMeta meta) external;
    function oracle_requestLimitOrder(
        uint64 _nonce,
        uint32 _orderKey,
        address _user,
        uint32 _marketIdx,
        PositionType _positionType,
        uint128 _collateral,
        uint32 _leverage,
        uint128 _triggerPrice,
        LimitOrderType _limitOrderType,
        uint128 stopLossTriggerPrice,
        uint128 takeProfitTriggerPrice,
        Callback.CallMeta _meta,
        uint128 _assetPrice
    ) external;
    function revert_requestLimitOrder(
        uint32 _reqNonce,
        PendingLimitOrder _pendRequest,
        uint32 _revertReason
    ) external;
    function finish_requestPendingLimitOrder(
        address _user,
        uint32 reqNonce,
        IGravixAccount.LimitOrder _order,
        uint32 _orderKey,
        Callback.CallMeta _meta
    ) external;
    function revert_requestPendingLimitOrder(
        uint32 _reqNonce,
        IGravixVault.PendingLimitOrder _pendingRequest,
        uint32 _revertReason
    ) external;
    function finish_requestLimitOrder(
        address _user,
        uint32 reqNonce,
        IGravixAccount.LimitOrder _order,
        uint32 _orderKey,
        Callback.CallMeta _meta
    ) external;

    function finish_cancelLimitOrder(
        address user,
        uint32 orderKey,
        uint128 collateral,
        bool positionHasStopConfig,
        Callback.CallMeta meta
    ) external;

    function revert_cancelLimitOrder(
        address user,
        uint32 orderKey,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;

    function revert_closePosition(
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external view;
    function oracle_closePosition(
        uint64 nonce,
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint128 assetPrice,
        Callback.CallMeta meta
    ) external;
    function finish_closePosition(
        address user,
        uint32 positionKey,
        IGravixAccount.PositionView positionView,
        address referrer,
        address grandReferrer,
        address initiator,
        Callback.CallMeta meta
    ) external;

    function finish_executeLimitOrder(
        address user,
        uint32 positionKey,
        IGravixAccount.Position openedPosition,
        address referrer,
        address grandReferrer,
        Callback.CallMeta meta
    ) external;

    function executeLimitOrders(
        mapping (uint32 => ExecuteLimitOrderData) limitOrdersMap,
        Callback.CallMeta meta
    ) external;

    function revert_executeLimitOrder(
        address user,
        uint32 orderKey,
        uint32 marketIdx,
        uint128 positionSizeAsset,
        PositionType positionType,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;
    function oracle_executeLimitOrder(
        uint64 _nonce,
        LimitOrderIdx[] limitOrders,
        uint128 _assetPrice,
        Callback.CallMeta _meta
    ) external;
    function oracle_setOrUpdatePositionTriggers(
        uint64 _nonce,
        address _user,
        uint32 _marketIdx,
        uint32 _positionKey,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice,
        uint128 _assetPrice,
        Callback.CallMeta _meta
    ) external;
    function finish_setOrUpdatePositionTriggers(
        address _user,
        IGravixAccount.Position _position,
        uint32 _positionKey,
        uint32 _marketIdx,
        bool _isFirstPositionTriggerPrice,
        Callback.CallMeta _meta
    ) external;
    function revert_setOrUpdatePositionTriggers(
        address _user,
        uint32 _positionKey,
        uint32 _marketIdx,
        uint32 _revertReason,
        Callback.CallMeta _meta
    ) external;
    function removePositionTriggers(
        uint32 _positionKey,
        uint32 _marketIdx,
        bool _removeStopLoss,
        bool _removeTakeProfit,
        Callback.CallMeta _meta
    ) external;
    function finish_removePositionTriggers(
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint8 triggersBefore,
        uint8 triggersAfter,
        IGravixAccount.Position updatedPosition,
        Callback.CallMeta _meta
    ) external;
    function revert_removePositionTriggers(
        address _user,
        uint32 _positionKey,
        uint32 _marketIdx,
        uint32 _revertReason,
        Callback.CallMeta _meta
    ) external;
    function executePositionsTriggers(
        mapping(uint32 => PositionTriggerData) _positionsMap,
        Callback.CallMeta _meta
    ) external;
    function oracle_executePositionsTriggers(
        uint64 nonce,
        uint32 _marketIdx,
        PositionTriggerIdx[] _positions,
        uint128 _assetPrice,
        Callback.CallMeta _meta
    ) external;
    function revert_executePositionsTriggers(
        address user,
        uint32 positionKey,
        uint32 marketIdx,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;
    function oracle_liquidatePositions(
        uint64 nonce, address liquidator, uint32 marketIdx, PositionIdx[] positions, uint128 assetPrice, Callback.CallMeta meta
    ) external;
    function revert_liquidatePositions(
        address user, address liquidator, uint32 positionKey, uint32 marketIdx, uint32 revertReason, Callback.CallMeta meta
    ) external view;
    function finish_liquidatePositions(
        address user,
        address liquidator,
        uint32 positionKey,
        IGravixAccount.PositionView positionView,
        address referrer,
        address grandReferrer,
        Callback.CallMeta meta
    ) external;
    function revert_addCollateral(
        address user,
        uint128 amount,
        uint32 marketIdx,
        uint32 positionKey,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;
    function finish_addCollateral(
        address user,
        uint128 amount,
        IGravixAccount.Position position,
        uint32 oldLeverage,
        uint32 positionKey,
        Callback.CallMeta meta
    ) external;
    function revert_removeCollateral(
        address user,
        uint128 amount,
        uint32 positionKey,
        uint32 marketIdx,
        uint32 revertReason,
        Callback.CallMeta meta
    ) external;
    function finish_removeCollateral(
        address user,
        uint128 amount,
        IGravixAccount.Position position,
        uint32 oldLeverage,
        uint32 positionKey,
        Callback.CallMeta meta
    ) external;
    function finish_withdrawReferralBalance(address user, uint128 refBal, Callback.CallMeta meta) external view;
    function onGravixAccountRequestUpgrade(address _user, uint32 _accountVersion, Callback.CallMeta _meta) external;
}
