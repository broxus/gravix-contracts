pragma ever-solidity >= 0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import {IPriceNode} from "./interfaces/IPriceNode.tsol";
import {Errors} from "./libraries/Errors.tsol";
import {MsgFlag} from "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import {IOnPriceCallback} from "./interfaces/IOnPriceCallback.tsol";
import {Gas} from "./libraries/Gas.tsol";


contract PriceNode is IPriceNode {
    event NewOraclePubkey(uint256 oldPk, uint256 newPk);
    event NewDaemonPubkey(uint256 oldPk, uint256 newPk);
    event NewMaxRequests(uint16 oldVal, uint16 newVal);
    event OwnershipTransferred(address oldOwner, address newOwner);
    event NewRequest(address sender, uint32 nonce, string ticker);
    event RequestResolved(address sender, uint32 nonce, string ticker);
    event NewMaxActionsPerTx(uint16 oldVal, uint16 newVal);

    uint32 static deployNonce;
    address owner;

    uint256 daemonPubkey;
    uint256 oraclePubkey;
    uint32 requestNonce;
    uint16 maxRequests = 1000;
    uint16 requestsNum;
    uint32 private lastRequestResolveTime;

    uint16 maxActionsPerTx = 20;

    mapping (string => TickerConfig) tickerConfigs; // ticker hash as a key
    mapping (string => mapping (uint32 => Request)) requests;
    mapping (string => uint32) requestsPerTicker;

    constructor(address _owner, uint256 _oraclePubkey, uint256 _daemonPubkey) public {
        require (tvm.pubkey() != 0, Errors.WRONG_PUBKEY);
        require (tvm.pubkey() == msg.pubkey(), Errors.WRONG_PUBKEY);
        tvm.accept();

        owner = _owner;
        oraclePubkey = _oraclePubkey;
        daemonPubkey = _daemonPubkey;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, Errors.NOT_OWNER);
        _;
    }

    function getRequestsPerTicker(string ticker) external view responsible returns (uint32 _requestsPerTicker) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } requestsPerTicker[ticker];
    }

    function getTickerConfigs() external view responsible returns (TickerConfig[] _configs) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } tickerConfigs.values();
    }

    function getTickerRequests(string ticker) external view responsible returns (Request[] _requests) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } requests[ticker].values();
    }

    function getDetails() external view responsible returns (
        address _owner,
        uint256 _daemonPubkey,
        uint256 _oraclePubkey,
        uint16 _maxRequests,
        uint16 _requestsNum,
        uint16 _maxActionsPerTx,
        uint32 _requestNonce,
        uint32 _lastRequestResolveTime
    ) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }(
            owner, daemonPubkey, oraclePubkey, maxRequests, requestsNum, maxActionsPerTx, requestNonce, lastRequestResolveTime
        );
    }

    function getLastRequestResolveTime() external view responsible returns (uint32 _lastRequestResolveTime) {
        _lastRequestResolveTime = requestsNum > 0 ? lastRequestResolveTime : now;
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } _lastRequestResolveTime;
    }

    function setTickerConfigs(TickerConfig[] configs) external onlyOwner {
        for (TickerConfig config: configs) {
            tickerConfigs[config.ticker] = config;
        }
    }

    function setMaxActionsPerTx(uint16 newMax) external onlyOwner {
        emit NewMaxActionsPerTx(maxActionsPerTx, newMax);
        maxActionsPerTx = newMax;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function setMaxRequests(uint16 newMax) external onlyOwner {
        emit NewMaxRequests(maxRequests, newMax);
        maxRequests = newMax;
    }

    function setOraclePubkey(uint256 newPk) external onlyOwner {
        emit NewOraclePubkey(oraclePubkey, newPk);
        oraclePubkey = newPk;
    }

    function setDaemonPubkey(uint256 newPk) external onlyOwner {
        emit NewDaemonPubkey(daemonPubkey, newPk);
        daemonPubkey = newPk;
    }

    function checkSign(
        uint128 p, uint32 t1, uint32 t2, string tick, TvmCell signature
    ) public view returns (bool) {
        TvmCell data = abi.encode(p, t1, t2, tick);
        return tvm.checkSign(tvm.hash(data), signature.toSlice(), oraclePubkey);
    }

    function makeRequest(string ticker, address sendGasTo) external override {
        require (msg.value >= Gas.PRICE_NODE_MIN_REQ_VALUE, Errors.LOW_MSG_VALUE);
        require (tickerConfigs[ticker].enabled, Errors.BAD_INPUT);
        // soft fail not to loose gas
        if (requestsPerTicker[ticker] >= maxRequests) {
            sendGasTo.transfer({ value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS });
            return;
        }

        // just take 0.05 ever to cover this call fees
        requests[ticker][requestNonce] = Request(msg.sender, msg.value - Gas.PRICE_NODE_MAKE_REQUEST_FEE);
        requestsNum += 1;
        requestNonce += 1;
        requestsPerTicker[ticker] += 1;
        emit NewRequest(msg.sender, requestNonce - 1, ticker);
    }

    function validatePrice(Price price) public view {
        TickerConfig config = tickerConfigs[price.ticker];
        require (config.enabled, Errors.BAD_INPUT);
        require (now - price.oracleTime < config.maxOracleDelay, Errors.STALE_PRICE);
        require (now - price.serverTime < config.maxServerDelay, Errors.STALE_PRICE);
        require (checkSign(price.price, price.serverTime, price.oracleTime, price.ticker, price.signature), Errors.BAD_SIGNATURE);
    }

    function resolveRequests(Price[] prices) external {
        require (msg.pubkey() == daemonPubkey || msg.sender == address(this), Errors.NOT_OWNER);
        require (requestsNum > 0, Errors.NO_REQUESTS);
        tvm.accept();

        uint16 requestsResolved = 0;
        for (Price price: prices) {
            validatePrice(price);

            mapping (uint32 => Request) reqsMap = requests[price.ticker];
            uint16 requestsResolvedPerTicker = requestsResolved;
            for ((uint32 nonce, Request req) : reqsMap) {
                requestsResolved += 1;
                delete reqsMap[nonce];
                IOnPriceCallback(req.sender).onPriceCallback{value: req.callbackValue - Gas.PRICE_NODE_CALLBACK_FEE}(price.price, price.ticker);
                emit RequestResolved(req.sender, nonce, price.ticker);

                if (requestsResolved >= maxActionsPerTx) {
                    break;
                }
            }
            requestsResolvedPerTicker = requestsResolved - requestsResolvedPerTicker;
            requestsNum -= requestsResolvedPerTicker;
            requestsPerTicker[price.ticker] -= requestsResolvedPerTicker;
            if (requestsResolved > 0) {
                lastRequestResolveTime = now;
            }

            requests[price.ticker] = reqsMap;
            if (requestsResolved >= maxActionsPerTx) {
                this.resolveRequests{value: 0.1 ever}(prices);
                return;
            }
        }
    }
}
