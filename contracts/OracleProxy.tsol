pragma ever-solidity ^0.62.0;


import "./interfaces/IOnRateCallback.tsol";
import "./interfaces/IGravixVault.tsol";
import "./interfaces/ITWAPOracle.tsol";
import "./libraries/Callback.tsol";
import "./libraries/Errors.tsol";
import "./interfaces/IPriceNode.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "./interfaces/IOnPriceCallback.tsol";


contract OracleProxy is IOnRateCallback, IOnPriceCallback {
    address static vault;
    uint64 static nonce;

    // this always set
    address usdt;
    address priceNode;
    uint32 marketIdx;
    IGravixVault.OracleType priceSource;
    IGravixVault.OracleConfig oracleConfig;
    Callback.CallMeta meta;

    // this is set for open/close
    uint32 positionKey;
    address user;

    // this is set for open
    uint128 collateral;
    uint32 leverage;
    IGravixVault.PositionType positionType;
    IGravixVault.LimitOrderType limitOrderType;
    address referer;
    uint128 triggerPrice;
    uint128 stopLossTriggerPrice;
    uint128 takeProfitTriggerPrice;

    // this is set for liquidations
    IGravixVault.PositionIdx[] positions;
    IGravixVault.LimitPositionIdx[] limitPositions;
    IGravixVault.TriggerPositionIdx[] triggerPositions;

    address liquidator;

    enum CallbackType {
        Execute,
        RequestLimit,
        ExecuteLimit,
        UpdatePositionTriggerPrice,
        SetExecutePositionsTriggers,
        Close,
        Liquidation
    }
    CallbackType callbackType;
    // dex oracle utility staff
    // pair addr => current reserves
    mapping (address => uint128[]) pairReserves;

    uint128 constant DEX_ORACLE_REQUEST_VALUE = 0.1 ever;
    uint128 constant SCALING_FACTOR = 10**18;
    uint128 constant CONTRACT_MIN_BALANCE = 0.01 ever;

    constructor (
        address _usdt,
        address _priceNode,
        uint32 _marketIdx,
        IGravixVault.OracleType _priceSource,
        IGravixVault.OracleConfig _oracleConfig,
        Callback.CallMeta _meta
    ) public {
        require (msg.sender == vault, Errors.BAD_SENDER);

        usdt = _usdt;
        priceNode = _priceNode;
        marketIdx = _marketIdx;
        priceSource = _priceSource;
        oracleConfig = _oracleConfig;
        meta = _meta;
    }

    function setExecuteCallback(
        address _user,
        uint32 _positionKey,
        uint128 _collateral,
        uint32 _leverage,
        IGravixVault.PositionType _positionType
    ) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        user = _user;
        positionKey = _positionKey;
        collateral = _collateral;
        leverage = _leverage;
        positionType = _positionType;
        callbackType = CallbackType.Execute;
        _collectPrice(user);
    }

    function setRequestLimitCallback(
        address _user,
        uint32 _positionKey,
        uint128 _collateral,
        uint32 _leverage,
        IGravixVault.PositionType _positionType,
        IGravixVault.LimitOrderType _limitOrderType,
        address _referer,
        uint128 _triggerPrice,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice
    ) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        user = _user;
        positionKey = _positionKey;
        collateral = _collateral;
        leverage = _leverage;
        positionType = _positionType;
        callbackType = CallbackType.RequestLimit;
        limitOrderType = _limitOrderType;
        referer = _referer;
        triggerPrice = _triggerPrice;
        stopLossTriggerPrice = _stopLossTriggerPrice;
        takeProfitTriggerPrice = _takeProfitTriggerPrice;
        _collectPrice(user);
    }

    function setExecuteLimitCallback(
        address _limitOrdersExecutor,
        IGravixVault.LimitPositionIdx[] _limitPositions
    ) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        user = _limitOrdersExecutor;
        callbackType = CallbackType.ExecuteLimit;
        limitPositions = _limitPositions;
        _collectPrice(_limitOrdersExecutor);
    }
    function setUpdatePositionTriggersCallback(
        address _user,
        uint32 _positionKey,
        uint128 _stopLossTriggerPrice,
        uint128 _takeProfitTriggerPrice
    ) external {
        require (msg.sender == vault, Errors.BAD_SENDER);
        callbackType = CallbackType.UpdatePositionTriggerPrice;
        user = _user;
        positionKey = _positionKey;
        stopLossTriggerPrice = _stopLossTriggerPrice;
        takeProfitTriggerPrice = _takeProfitTriggerPrice;
        _collectPrice(user);
    }
    function setExecutePositionsTriggersCallback(
        address _limitOrdersExecutor,
        IGravixVault.TriggerPositionIdx[] _triggerPositions
    ) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        user = _limitOrdersExecutor;
        callbackType = CallbackType.SetExecutePositionsTriggers;
        triggerPositions = _triggerPositions;
        _collectPrice(_limitOrdersExecutor);
    }

    function setCloseCallback(address _user, uint32 _positionKey) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        user = _user;
        positionKey = _positionKey;
        callbackType = CallbackType.Close;
        _collectPrice(user);
    }

    function setLiquidationCallback(address _liquidator, IGravixVault.PositionIdx[] _positions) external {
        require (msg.sender == vault, Errors.BAD_SENDER);

        liquidator = _liquidator;
        positions = _positions;
        callbackType = CallbackType.Liquidation;
        _collectPrice(liquidator);
    }

    function _collectPrice(address /*sendGasTo*/) internal view {
        if (priceSource == IGravixVault.OracleType.Dex) {
            _collectPriceFromDex();
        } else if (priceSource == IGravixVault.OracleType.PriceNode) {
            _collectPriceFromPriceNode();
        }
    }

    function _collectPriceFromDex() internal view {
        IGravixVault.DexOracle dex = oracleConfig.dex;

        for (uint i = 0; i < dex.path.length; i++) {
            IGravixVault.Pair pair = dex.path[i];
            TvmCell requestPayload = abi.encode(i);

            ITWAPOracle(pair.addr).rate{value: DEX_ORACLE_REQUEST_VALUE}(
                uint32(now) - 1, uint32(now), address(this), requestPayload
            );
        }
    }

    function _collectPriceFromPriceNode() internal view {
        tvm.rawReserve(CONTRACT_MIN_BALANCE, 0);

        IPriceNode(priceNode).makeRequest{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(oracleConfig.priceNode.ticker);
    }

    function _sendCallback(uint128 price) internal view {
        tvm.rawReserve(CONTRACT_MIN_BALANCE, 0);
        if (callbackType == CallbackType.Execute) {
            IGravixVault(vault).oracle_executeMarketOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                user,
                positionKey,
                marketIdx,
                collateral,
                leverage,
                positionType,
                price,
                meta
            );
        } else if (callbackType == CallbackType.RequestLimit) {
            IGravixVault(vault).oracle_requestLimitOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                user,
                marketIdx,
                positionType,
                collateral,
                leverage,
                triggerPrice,
                limitOrderType,
                stopLossTriggerPrice,
                takeProfitTriggerPrice,
                referer,
                meta,
                price

            );
        } else if (callbackType == CallbackType.ExecuteLimit) {
            IGravixVault(vault).oracle_executeLimitOrder{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                limitPositions,
                price,
                meta
            );
        } else if (callbackType == CallbackType.UpdatePositionTriggerPrice) {
            IGravixVault(vault).oracle_setOrUpdatePositionTriggers{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                user,
                marketIdx,
                positionKey,
                stopLossTriggerPrice,
                takeProfitTriggerPrice,
                price,
                meta
            );
        } else if (callbackType == CallbackType.SetExecutePositionsTriggers) {
            IGravixVault(vault).oracle_triggerPositions{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                marketIdx,
                triggerPositions,
                price,
                meta
            );
        } else if (callbackType == CallbackType.Close) {
            IGravixVault(vault).oracle_closePosition{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                user,
                positionKey,
                marketIdx,
                price,
                meta
            );
        } else {
            IGravixVault(vault).oracle_liquidatePositions{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                nonce,
                liquidator,
                marketIdx,
                positions,
                price,
                meta
            );
        }
    }

    function onPriceCallback(uint128 price, string ticker) external override {
        // ttl is checked on price node side
        require (msg.sender == priceNode, Errors.BAD_SENDER);
        // just in case
        require (ticker == oracleConfig.priceNode.ticker, Errors.BAD_INPUT);

        _sendCallback(price);
    }


    function _reject() internal view {
        if (callbackType == CallbackType.Liquidation) {
            liquidator.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO);
        } else {
            user.transfer(0, false, MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO);
        }
    }

    // dex oracle callback
    function onRateCallback(
        optional(ITWAPOracle.Rate),
        uint128[] _reserves,
        address _callbackRequester,
        TvmCell _payload
    ) external override {
        require (_callbackRequester == address(this), Errors.BAD_SENDER);

        uint idx = abi.decode(_payload, (uint));
        IGravixVault.DexOracle dex = oracleConfig.dex;
        require (msg.sender == dex.path[idx].addr, Errors.BAD_SENDER);

        pairReserves[msg.sender] = _reserves;

        if (pairReserves.keys().length == dex.path.length) {
            // ok, we got all reserves we need
            address targetToken = dex.targetToken;
            uint128 price = SCALING_FACTOR; // 1 * 10**18

            for (IGravixVault.Pair pair : dex.path) {
                uint128 pairPrice;
                uint128[] reserves = pairReserves[pair.addr];

                if (pair.leftRoot == targetToken) {
                    pairPrice = math.muldiv(reserves[1], SCALING_FACTOR, reserves[0]);
                    targetToken = pair.rightRoot;
                } else if (pair.rightRoot == targetToken) {
                    pairPrice = math.muldiv(reserves[0], SCALING_FACTOR, reserves[1]);
                    targetToken = pair.leftRoot;
                } else {
                    revert (Errors.BAD_DEX_ORACLE_PATH);
                }
                price = math.muldiv(price, pairPrice, SCALING_FACTOR);
            }
            // path should resolve in USDT
            // TODO: uncomment for prod
            require (targetToken == usdt, Errors.BAD_DEX_ORACLE_PATH);
            // convert to final price using standard token decimals
            price = math.muldiv(price, 10**9, SCALING_FACTOR);
            _sendCallback(price * 100); // add 2 decimals to get 8
        }
    }
}
