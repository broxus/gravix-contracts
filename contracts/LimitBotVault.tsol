pragma ever-solidity ^0.62.0;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

import "./interfaces/ILimitBotVault.tsol";
import "./libraries/Errors.tsol";

contract LimitBotVault is ILimitBotVault {
    address owner;
    address gravixVault;
    uint128 constant CONTRACT_MIN_BALANCE = 1 ever;

    modifier onlyOwnerOrGravixVault() {
        require(msg.sender == owner || msg.sender == gravixVault, Errors.NOT_OWNER_OR_GRAVIX_VAULT);
        _;
    }

    constructor(
        address _gravixVault,
        address _owner
    ) public {
        tvm.accept();
        owner = _owner;
        gravixVault = _gravixVault;
    }

    function _reserveWithValue(uint128 _value) internal returns (uint128) {
        return math.max(address(this).balance - (msg.value + _value), CONTRACT_MIN_BALANCE);
    }

    function sendTo(address _to, uint128 _amount) external override onlyOwnerOrGravixVault {
        tvm.rawReserve(_reserveWithValue(_amount), 0);
        _to.transfer({ value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false });
    }
}
